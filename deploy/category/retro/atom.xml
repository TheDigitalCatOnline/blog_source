<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Digital Cat - Retro</title><link href="https://www.thedigitalcatonline.com/" rel="alternate"></link><link href="https://www.thedigitalcatonline.com/category/retro/atom.xml" rel="self"></link><id>https://www.thedigitalcatonline.com/</id><updated>2021-12-21T08:00:00+00:00</updated><subtitle>Adventures of a curious cat in the land of programming</subtitle><entry><title>Motorola 68000: addressing modes</title><link href="https://www.thedigitalcatonline.com/blog/2019/03/04/motorola-68000-addressing-modes/" rel="alternate"></link><published>2019-03-04T22:30:00+01:00</published><updated>2019-03-04T22:30:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2019-03-04:/blog/2019/03/04/motorola-68000-addressing-modes/</id><summary type="html">&lt;p&gt;A review of the addressing modes of one of the most famous 32-bit CPUs&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Motorola 68000 is an impressive microprocessor, and this is reflected by the large amount of addressing modes that it provides; it is actually surprising, for people used to the x86 family, to find in this microprocessor's Assembly language constructs that are very similar to the ones provided by high level languages such as pre- and postdecrements, or multiconditional branching instructions.&lt;/p&gt;
&lt;p&gt;The processor provides 6 different addressing modes, each of which has multiple versions, for a grand total of 14. The specific instruction used to manipulate the data can also work on different data sizes, but these variations are not considered here, being features of the instruction and not of the addressing mode.&lt;/p&gt;
&lt;p&gt;Addressing refers to the format of the &lt;strong&gt;effective address&lt;/strong&gt; (&lt;code&gt;ea&lt;/code&gt; or &lt;code&gt;EA&lt;/code&gt; in many manuals), that is the representation of the source or destination of an instruction. Remember that not all the instructions support all 14 modes, so whenever you read &lt;code&gt;ea&lt;/code&gt; remember that we are talking about data which address can be represented by one or more of those modes. &lt;/p&gt;
&lt;p&gt;The syntax of the &lt;code&gt;movea&lt;/code&gt; instruction, for example, is &lt;code&gt;movea &amp;lt;ea&amp;gt;, An&lt;/code&gt;, which tells us that the source is one of the 14 possible combinations presented here, while the destination is one of the address registers &lt;code&gt;a1-a6&lt;/code&gt;. Strictly speaking, however, the syntax of the instruction is &lt;code&gt;movea &amp;lt;ea1&amp;gt;, &amp;lt;ea2&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;ea1&amp;gt;&lt;/code&gt; can be one of the 14 modes, and &lt;code&gt;&amp;lt;ea2&amp;gt;&lt;/code&gt; can only be an address register (Address Register Direct Mode).&lt;/p&gt;
&lt;p&gt;The addressing mode is encoded using three fields of the binary instruction. The &lt;strong&gt;EA Mode&lt;/strong&gt; field, the &lt;strong&gt;EA register&lt;/strong&gt; field, and the &lt;strong&gt;Extension words&lt;/strong&gt;. The first two are 3-bit fields contained in the instruction word, which combination uniquely identifies the addressing mode and the number of the register, in case this is needed. The extension words, instead, are words that follow the instruction word in memory, and that usually represent actual 8-, 16-, or 32-bit numbers.&lt;/p&gt;
&lt;h2 id="sign-extension"&gt;Sign extension&lt;a class="headerlink" href="#sign-extension" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we discuss the addressing modes provided by the MC68000 it is worth explaining the sign-extension mechanism used by this processor. Sometimes addressing modes use 8-bit or 16-bit data instead of a full long word, for example to provide a constant that is added to a register before using its value. Calculations inside the microprocessor, however, are always performed on 32-bits numbers, so such values are &lt;em&gt;extended&lt;/em&gt; to a long word.&lt;/p&gt;
&lt;p&gt;There are two ways to extend a byte/word to a long word. One is to pad with zeroes on the left (unsigned extension) and the other is to pad preserving the sign (signed extension). While this doesn't change positive numbers it affects negative ones. Let's consider an 8-bit negative number like -126, which is represented by &lt;code&gt;10000010&lt;/code&gt; in 8-bit two's complement, &lt;code&gt;0x82&lt;/code&gt; in hexadecimal. A 32-bit signed extension of this number becomes &lt;code&gt;0xffffff82&lt;/code&gt;, which is still -126 in 32-bit two's complement, but an unsigned extension would give &lt;code&gt;0x00000082&lt;/code&gt;, which is 130.&lt;/p&gt;
&lt;p&gt;While the MC68000 can use both address and data registers for general-purpose data storage, the two categories are meant to manage data of different nature. In particular, &lt;em&gt;data registers never sign-extend bytes or words&lt;/em&gt;, as this would change the pure representation of that sequence of bits, adding spurious bits to keep the sign. Addressed, instead, should never change their value, so the &lt;em&gt;address registers sign-extend incoming values&lt;/em&gt; to preserve the real address or displacement represented by the bits.&lt;/p&gt;
&lt;h2 id="addressing-modes"&gt;Addressing Modes&lt;a class="headerlink" href="#addressing-modes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="register-direct"&gt;Register Direct&lt;a class="headerlink" href="#register-direct" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the simplest addressing mode, as it reads or writes data in one of the microprocessor's registers. There are two versions of it, one for data registers and one for address registers.&lt;/p&gt;
&lt;h4 id="data-register-direct"&gt;Data Register Direct&lt;a class="headerlink" href="#data-register-direct" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;Dn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: Register number&lt;/li&gt;
&lt;li&gt;Extension words: 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This mode addresses the data contained in one of the data registers &lt;code&gt;d0-d7&lt;/code&gt;. The EA Mode field is &lt;code&gt;000&lt;/code&gt; and the EA Register field contains the register number. The official documentation uses the syntax &lt;code&gt;Dn&lt;/code&gt; to identify this mode. No extension words are used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cmpi.w  #0x1111,d1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="n"&gt;Compare&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0x1111&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x12ca&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;------------&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0x12ca&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="address-register-direct-mode"&gt;Address Register Direct Mode&lt;a class="headerlink" href="#address-register-direct-mode" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;An&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;001&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: Register number&lt;/li&gt;
&lt;li&gt;Extension words: 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This mode identifies the data contained in one of the address registers &lt;code&gt;a0-a6&lt;/code&gt;. The EA Mode field is &lt;code&gt;001&lt;/code&gt; and the EA Register field is the number of the register, while the official syntax for it is &lt;code&gt;An&lt;/code&gt;.  No extension words are used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cmpi.w  #0x1111,a1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="n"&gt;Compare&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="o"&gt;+------------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0x1111&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="o"&gt;+------------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d28&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----------&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d28&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="o"&gt;+------------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="register-indirect"&gt;Register Indirect&lt;a class="headerlink" href="#register-indirect" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As the name of this mode suggests, the addressing is performed using a register, but the data is accessed indirectly. The register doesn't contain the data we want to use, but the address in memory of the data. This is what higher level languages like C call &lt;em&gt;memory pointer&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id="address-register-indirect"&gt;Address Register Indirect&lt;a class="headerlink" href="#address-register-indirect" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;(An)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;010&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: Register number&lt;/li&gt;
&lt;li&gt;Extension words: 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The simplest form of indirect access is when the address of the data is stored in one of the address registers &lt;code&gt;a0-a6&lt;/code&gt;. The syntax for this mode is &lt;code&gt;(An)&lt;/code&gt;, while the binary form has the EA Mode field set to &lt;code&gt;010&lt;/code&gt; and the EA Register field represents the number of the address register in use. No extension words are used.&lt;/p&gt;
&lt;p&gt;The following example compares the number &lt;code&gt;0x1111&lt;/code&gt; with the content of the memory cell which address is contained in &lt;code&gt;a1&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cmpi.w  #0x1111,(a1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d28&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d24&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;Compare&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d26&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0x1111&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;+------------&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d28&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0x13c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-----------&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mh"&gt;0x13c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                               &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d2a&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                               &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d2c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="address-register-indirect-with-postincrement"&gt;Address Register Indirect with Postincrement&lt;a class="headerlink" href="#address-register-indirect-with-postincrement" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;(An)+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;011&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: Register number&lt;/li&gt;
&lt;li&gt;Extension words: 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This addressing mode is another of the high-level languages constructs that the MC68000 provides directly in its Assembly language. This mode works exactly like the Address Register Indirect, but &lt;em&gt;after&lt;/em&gt; the data has been fetched from memory the address register is incremented by the size of the data itself. So, this addressing mode is perfectly suited for algorithms that need to read consecutive arrays from memory, as there is no need to add instructions that increment the pointer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cmpi.w  #0x1111,(a1)+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d28&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d24&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;Compare&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d26&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0x1111&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;+----+&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;--+------------&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d28&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0x13c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-----------&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mh"&gt;0x13c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;+----+&lt;/span&gt;&lt;span class="w"&gt;                             &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d2a&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                      &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d2c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The standard syntax is &lt;code&gt;(An)+&lt;/code&gt;, and for this mode, the EA Mode field is &lt;code&gt;011&lt;/code&gt;, while the EA Register field contains the register number.  No extension words are used.&lt;/p&gt;
&lt;p&gt;This mode and the following one are very powerful, as they automatically add to the address the size of the data that has been read, so 1 for a byte read, 2 for a word, and 4 for a long word. The only exception to this rule is when the register is &lt;code&gt;a7&lt;/code&gt;, which is an alias for &lt;code&gt;sp&lt;/code&gt;, the system Stack Pointer. In that case the pointer is always kept aligned to a word boundary, so the increment is 2 even for a byte read.&lt;/p&gt;
&lt;h4 id="address-register-indirect-with-predecrement"&gt;Address Register Indirect with Predecrement&lt;a class="headerlink" href="#address-register-indirect-with-predecrement" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;-(An)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: Register number&lt;/li&gt;
&lt;li&gt;Extension words: 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the specular version of the previous mode, where the address register used to point to the data is decremented &lt;em&gt;before&lt;/em&gt; the addressing is performed. The standard syntax is &lt;code&gt;-(An)&lt;/code&gt;; the EA Mode field is &lt;code&gt;100&lt;/code&gt; and the EA Register field contains the register number. No extension words are used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cmpi.w  #0x1111,-(a1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d28&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;+----+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d22&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;Compare&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;+----+&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d24&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0x1111&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;+-------+----------&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d26&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0x13c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-----------&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mh"&gt;0x13c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                   &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d28&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                   &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d2a&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="address-register-indirect-with-displacement"&gt;Address Register Indirect with Displacement&lt;a class="headerlink" href="#address-register-indirect-with-displacement" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;(d16,An) / d16(An)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;101&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: Register number&lt;/li&gt;
&lt;li&gt;Extension words: 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The natural evolution of the previous two addressing modes is to use an arbitrary offset that is added to the base address contained in the register. The standard syntax for this mode is &lt;code&gt;(d16,An)&lt;/code&gt; or &lt;code&gt;d16(An)&lt;/code&gt;, where &lt;code&gt;d16&lt;/code&gt; is a 16-bit signed integer. So for example &lt;code&gt;0xf(a1)&lt;/code&gt; is the data contained in memory at the address &lt;code&gt;a1 + 0xf&lt;/code&gt;. The EA Mode field is &lt;code&gt;101&lt;/code&gt; and the EA register fields is the number of the address register used. This address mode requires 1 extension word that contains the 16-bit displacement.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cmpi.w  #0x1111,0x140(a1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d28&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;+---+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mh"&gt;0x140&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="mh"&gt;0xfc1e64&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;Compare&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;+---+&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="mh"&gt;0xfc1e66&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0x1111&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="o"&gt;+------------&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xfc1e68&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0x13c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-----------&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mh"&gt;0x13c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                          &lt;/span&gt;&lt;span class="mh"&gt;0xfc1e6a&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="o"&gt;+---------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                          &lt;/span&gt;&lt;span class="mh"&gt;0xfc1e6c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Please note that the displacement is fixed to 16-bit, so its value limited in the range &lt;code&gt;(-32768,32767)&lt;/code&gt;; the displacement is however sign-extended to 32-bit before being added to the base address.&lt;/p&gt;
&lt;p&gt;Note: this mode is sometimes called "Register Indirect with Offset".&lt;/p&gt;
&lt;h4 id="address-register-indirect-with-index"&gt;Address Register Indirect with Index&lt;a class="headerlink" href="#address-register-indirect-with-index" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;(d8,Dn,An)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;110&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: Register number&lt;/li&gt;
&lt;li&gt;Extension words: 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides an addressing mode that mimics C-style loops and a way to perform random access of arrays through a 16-bit displacement, the MC68000 provides a double-indexed array access with this addressing mode. The base address contained in one of the address registers is added to the content of a 16/32-bit register and an 8-bit index. This address mode requires 1 extension word that contains the 8-bit index; only the 8 least significant bits of the extension words are kept and sign-extended to 32-bits before any calculation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cmpi.w  #0x1111,(0x4,d0,a1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xfc1d28&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x140&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+---+&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;--------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+---+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+---+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mh"&gt;0x4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="mh"&gt;0xfc1e68&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;Compare&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+---+&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="mh"&gt;0xfc1e6a&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mh"&gt;0x1111&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;+------------&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0xfc1e6c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;data&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-----------&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mh"&gt;0x13c&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                   &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="mh"&gt;0xfc1e6e&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                   &lt;/span&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="mh"&gt;0xfc1e70&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For this mode the EA Mode field is set to &lt;code&gt;110&lt;/code&gt; and the EA Register field contains the number of the address register in use. The standard syntax used by manuals is &lt;code&gt;(d8, An, Dn.SIZE)&lt;/code&gt;, where &lt;code&gt;SIZE&lt;/code&gt; can be either &lt;code&gt;w&lt;/code&gt; or &lt;code&gt;l&lt;/code&gt;. This addressing mode can provide an invaluable way to access two-dimensional arrays, and once again shows how powerful this microprocessor is.&lt;/p&gt;
&lt;p&gt;Note: this mode is sometimes called "Indexed Register Indirect with Offset"&lt;/p&gt;
&lt;h3 id="absolute-data"&gt;Absolute Data&lt;a class="headerlink" href="#absolute-data" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;These modes provide a version of the Address Register Indirect mode where the address is specified directly in the instruction and not through a register.&lt;/p&gt;
&lt;h4 id="absolute-short-data"&gt;Absolute Short Data&lt;a class="headerlink" href="#absolute-short-data" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;&amp;lt;address&amp;gt;.w&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;111&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: &lt;code&gt;000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Extension words: 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This mode specifies the address of the data in memory through a 16-bit direct operand specified in the extension word. The standard syntax is &lt;code&gt;&amp;lt;address&amp;gt;.w&lt;/code&gt;, while the EA mode and EA register fields are respectively &lt;code&gt;111&lt;/code&gt; and &lt;code&gt;000&lt;/code&gt;. Since the address is a signed word, only the first or the last 32KiB of memory can be addressed (respectively using positive and negative addresses).&lt;/p&gt;
&lt;h4 id="absolute-long-data"&gt;Absolute Long Data&lt;a class="headerlink" href="#absolute-long-data" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;&amp;lt;address&amp;gt;.l&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;111&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: &lt;code&gt;001&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Extension words: 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the 32-bit version of the previous mode, with EA mode and EA register fields set respectively to &lt;code&gt;111&lt;/code&gt; and &lt;code&gt;001&lt;/code&gt;. The standard syntax is &lt;code&gt;&amp;lt;address&amp;gt;.l&lt;/code&gt;, and it requires two extension words. As always in the MC68000 long words are given in big endian order, that is the first word is the most significant part of the address and the second word is the least significant one.&lt;/p&gt;
&lt;p&gt;It is worth noting that this mode overcomes the limitation of the previous one, allowing you to access the full 16MiB address space. However, it requires more memory space, having two extension words, and 4 additional CPU cycles to be executed.&lt;/p&gt;
&lt;h3 id="program-counter-relative"&gt;Program Counter Relative&lt;a class="headerlink" href="#program-counter-relative" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The addressing modes relative to the Program Counter (PC) are the fundamental building block of relocatable programs, as the effective address is computed as a displacement from the address of the current instruction being executed. Strictly speaking the base address is that of the extension word, as will be shown in detail later in this article.&lt;/p&gt;
&lt;p&gt;Please note that effective addresses expressed with Program Counter Relative can only be used to read from memory.&lt;/p&gt;
&lt;h4 id="program-counter-relative-with-displacement"&gt;Program Counter Relative with Displacement&lt;a class="headerlink" href="#program-counter-relative-with-displacement" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;(d16,PC)&lt;/code&gt; or &lt;code&gt;d16(PC)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;111&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: &lt;code&gt;010&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Extension words: 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This mode is very similar to Address Register Indirect with Displacement, as both use a 16-bit offset added to a base address; in this case the latter is provided by the PC instead of an address register. The EA mode field is &lt;code&gt;111&lt;/code&gt; and the EA Register field is &lt;code&gt;010&lt;/code&gt;. One extension word is needed, to provide the signed 16-bits displacement, extended to 32-bit before any other calculation.&lt;/p&gt;
&lt;p&gt;Note: this mode is sometimes called "Program Counter Relative with Offset".&lt;/p&gt;
&lt;h4 id="program-counter-relative-with-index"&gt;Program Counter Relative with Index&lt;a class="headerlink" href="#program-counter-relative-with-index" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;(d8,Dn,PC)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;111&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: &lt;code&gt;011&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Extension words: 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the Program Counter version of Address Register Indirect with Index. The EA mode field is &lt;code&gt;111&lt;/code&gt; and the EA Register field is &lt;code&gt;011&lt;/code&gt;. One extension word is needed, to provide the signed 8-bits displacement, which will be extended to 32 bit before using it.&lt;/p&gt;
&lt;p&gt;Note: this mode is sometimes called "Program Counter Relative with Index and Offset".&lt;/p&gt;
&lt;h3 id="immediate-data"&gt;Immediate Data&lt;a class="headerlink" href="#immediate-data" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assembly syntax: &lt;code&gt;#&amp;lt;data&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Mode field: &lt;code&gt;111&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;EA Register field: &lt;code&gt;100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Extension words: 1,2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Immediate data uses the plain data written in the extension words instead of referring to the system memory. In this mode you can specify a constant of any length (byte, word, long word). The EA mode and EA register fields are respectively &lt;code&gt;111&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt;, and the number of extension words is either 1 (byte and word) or 2 (long word). Remember that the 68000 sign-extends data only when the destination is an address register, leaving it untouched when a data register is used. The standard syntax for this addressing mode is &lt;code&gt;#&amp;lt;data&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="quick-immediate"&gt;Quick Immediate&lt;a class="headerlink" href="#quick-immediate" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This addressing mode is available for a set of 3 instructions only, namely &lt;code&gt;addq&lt;/code&gt;, &lt;code&gt;subq&lt;/code&gt;, and &lt;code&gt;moveq&lt;/code&gt;. For the first two instructions, it allows to specify a value between 1 and 8 (3 bits), while the third one can interact with a full signed byte, managing a value between -128 and 127. The "quick" label comes from the fact that the instructions use bits of their own binary representation to store the data, thus requiring no extension words. As happens for the simple Immediate Data addressing, EA mode field is &lt;code&gt;111&lt;/code&gt; and EA Register field is &lt;code&gt;100&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="implied"&gt;Implied&lt;a class="headerlink" href="#implied" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is another mode that is available only for some instructions. Those are bound to specific registers, and are thus not really allowing any generic effective address to be used. The registers used in this addressing mode are only &lt;code&gt;SP&lt;/code&gt;, &lt;code&gt;PC&lt;/code&gt;, &lt;code&gt;SP&lt;/code&gt;, &lt;code&gt;SSP&lt;/code&gt;, &lt;code&gt;SR&lt;/code&gt;, and &lt;code&gt;USP&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="table-of-addressing-modes"&gt;Table of addressing modes&lt;a class="headerlink" href="#table-of-addressing-modes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following table gives an overview of all the addressing modes. For each of them I show the name, the standard Assembly syntax, the value of the EA Mode field, the value of the EA Register field, and the number of extension word required.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;EA Mode&lt;/th&gt;
&lt;th&gt;EA Register&lt;/th&gt;
&lt;th&gt;Extension words&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Data Register Direct&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Dn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reg. number&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Address Register Direct Mode&lt;/td&gt;
&lt;td&gt;&lt;code&gt;An&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;001&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reg. number&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Address Register Indirect&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(An)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;010&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reg. number&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Address Register Indirect with Postincrement&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(An)+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;011&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reg. number&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Address Register Indirect with Predecrement&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-(An)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reg. number&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Address Register Indirect with Displacement&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(d16,An)&lt;/code&gt; or &lt;code&gt;d16(An)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;101&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reg. number&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Address Register Indirect with Index&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(d8,Dn,An)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;110&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reg. number&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Absolute Short Data&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;address&amp;gt;.w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;111&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Absolute Long Data&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;address&amp;gt;.l&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;111&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;001&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program Counter Relative with Displacement&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(d16,PC)&lt;/code&gt; / &lt;code&gt;d16(PC)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;111&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;010&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program Counter Relative with Index&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(d8,Dn,PC)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;111&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;011&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Immediate&lt;/td&gt;
&lt;td&gt;&lt;code&gt;#&amp;lt;data&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;111&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;100&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1,2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="examples"&gt;Examples&lt;a class="headerlink" href="#examples" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let's consider some example of actual MC68000 code that uses effective addressing modes.&lt;/p&gt;
&lt;h3 id="example-1"&gt;Example 1&lt;a class="headerlink" href="#example-1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;0280&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0003&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ffff&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x3ffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This instruction uses the the Data Register Direct mode to address register &lt;code&gt;d0&lt;/code&gt;. The instruction format of &lt;code&gt;andi&lt;/code&gt; is the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;| 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04 | 03 | 02 | 01 | 00 |
| 0  | 0  | 0  | 0  | 0  | 0  | 1  | 0  | SIZE    | EFFECTIVE ADDRESS           |
|                                       |         | MODE         | REGISTER     |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which in the example shown above translates to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;00000010&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mf"&gt;000&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mf"&gt;000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0000000000000011&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1111111111111111&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Dn&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So the microprocessor expects the instruction to be followed by two extension words (long), that will contain the immediate data that will be added to the register. The register is selected among the data ones because the EA Mode field is &lt;code&gt;000&lt;/code&gt;, and the EA Register field selects register number 0. The two following extension words are &lt;code&gt;0003&lt;/code&gt; and &lt;code&gt;ffff&lt;/code&gt;, so the number &lt;code&gt;0x3ffff&lt;/code&gt; is added to the register.&lt;/p&gt;
&lt;h3 id="example-2"&gt;Example 2&lt;a class="headerlink" href="#example-2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;2052&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;movea&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;movea&lt;/code&gt; instruction moves data into an address register, but in this case uses the Address Register Indirect mode to specify the source. The instruction format is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;| 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04 | 03 | 02 | 01 | 00 |
| 0  | 0  | SIZE    | DEST. REG.   | 0  | 0  | 1  | SOURCE EFFECTIVE ADDRESS    |
|         |         |              |              | MODE         | REGISTER     |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;so in this case the hexadecimal code &lt;code&gt;2052&lt;/code&gt; becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;00&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mf"&gt;000&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mf"&gt;001&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mf"&gt;010&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mf"&gt;010&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;An&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="example-3"&gt;Example 3&lt;a class="headerlink" href="#example-3" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;397&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0200&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0100&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x100&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code&gt;move&lt;/code&gt; instruction puts a word with the value &lt;code&gt;0x200&lt;/code&gt; into an address which is &lt;code&gt;0x100&lt;/code&gt; above the address pointed by &lt;code&gt;a4&lt;/code&gt;. It uses Immediate Data for the source and Address Register Indirect with Displacement for the destination. The format of the &lt;code&gt;move&lt;/code&gt; instruction is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;| 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04 | 03 | 02 | 01 | 00 |
| 0  | 0  | SIZE    | DEST. EFFECTIVE ADDRESS     | SOURCE EFFECTIVE ADDRESS    |
|         |         | REGISTER     | MODE         | MODE         | REGISTER     |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(please note that register and mode are swapped in the destination part)&lt;/p&gt;
&lt;p&gt;In this case we have&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;00&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mf"&gt;11&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mf"&gt;100&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mf"&gt;101&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="mf"&gt;111100&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;
&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;a4&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;An&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Immediate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;Data&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is interesting to note that the word for the source is given with Immediate Data, and is indeed just after the instruction (&lt;code&gt;0x0200&lt;/code&gt;), followed by the 16-bit displacement for Address Register Indirect with Displacement (&lt;code&gt;0x0100&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id="lea-load-effective-address"&gt;LEA: Load Effective Address&lt;a class="headerlink" href="#lea-load-effective-address" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Many newcomers to Assembly are confused by the need of the &lt;code&gt;lea&lt;/code&gt; instruction, so I want to briefly show why we need it, and dig into its low-level representation to clarify possible doubts.&lt;/p&gt;
&lt;p&gt;As we saw in the previous sections there are three ways to manage data in the M68000 Assembly language: the first is to mention a &lt;em&gt;pure number&lt;/em&gt;, the second is to use a &lt;em&gt;register&lt;/em&gt;, and the third is to use a &lt;em&gt;memory address&lt;/em&gt;. Registers can be considered memory, but since they are not proper arrays I will consider them something different.&lt;/p&gt;
&lt;p&gt;The Immediate Data addressing mode allows us to use pure data in an instruction. For example we may write &lt;code&gt;move.l  #0x20000,d0&lt;/code&gt;, which puts the number &lt;code&gt;0x20000&lt;/code&gt; into the first data register. So when we mention a pure number the microprocessor uses its binary representation directly.&lt;/p&gt;
&lt;p&gt;When we mention a register, the microprocessor does the only thing it can do with it, that is it reads its value or writes into it. The instruction mentioned previously, &lt;code&gt;move.l  #0x20000,d0&lt;/code&gt;, puts the number into the register &lt;code&gt;d0&lt;/code&gt;. An instruction like &lt;code&gt;cmp.l d2,d3&lt;/code&gt;, instead, reads the value of both registers and performs the comparison.&lt;/p&gt;
&lt;p&gt;Memory addresses are similar to registers, but they are identified by a number and not by a name (and are part of a contiguous array). Whenever an instruction mentions a memory address the microprocessor automatically tries to access that location, to read or to write. An instruction like &lt;code&gt;move.l 0x4,d3&lt;/code&gt; moves into &lt;code&gt;d3&lt;/code&gt; &lt;em&gt;the content&lt;/em&gt; of the address &lt;code&gt;0x4&lt;/code&gt;, and this happens just because &lt;code&gt;0x4&lt;/code&gt; is a memory address.&lt;/p&gt;
&lt;p&gt;That said, the problem we face is that often we want to compute a memory address and deal with &lt;em&gt;its value&lt;/em&gt; and not with its content. For example, if we write &lt;code&gt;move.w 0xe(a1),d0&lt;/code&gt;, the microprocessor computes &lt;code&gt;a1 + 0xe&lt;/code&gt;, that is, the content of &lt;code&gt;a1&lt;/code&gt; plus the number &lt;code&gt;0xe&lt;/code&gt;, and then fetches the content of that address in memory, putting it into &lt;code&gt;d0&lt;/code&gt;. How can we compute &lt;code&gt;a1 + 0xe&lt;/code&gt; and put that &lt;em&gt;result&lt;/em&gt; into &lt;code&gt;d0&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;This is where &lt;code&gt;lea&lt;/code&gt; comes into play. This instruction loads the effective address computed by the addressing mode that we are using into an address register. So &lt;code&gt;lea 0xe(a1),a2&lt;/code&gt; puts the sum between the content of &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;0xe&lt;/code&gt; into the register &lt;code&gt;a2&lt;/code&gt;. Familiarising with &lt;code&gt;lea&lt;/code&gt; is very important, as it is one of the most important instructions that the Motorola 68000 provides. A quick analysis of the Amiga Kickstart code shows that &lt;code&gt;lea&lt;/code&gt; is the 4th most used instruction, after &lt;code&gt;move&lt;/code&gt;, &lt;code&gt;jsr&lt;/code&gt;, and &lt;code&gt;bra&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="program-counter-relative-syntax-and-representation"&gt;Program Counter Relative syntax and representation&lt;a class="headerlink" href="#program-counter-relative-syntax-and-representation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As we discussed previously, the two Program Counter Relative modes just mirror Address Register Indirect with Displacement and Address Register Indirect with Index, binding them to the Program Counter instead of a generic register. It is worth however digging exactly into what the microprocessor is doing when decoding this addressing mode, and what the standard Assembly representation means.&lt;/p&gt;
&lt;p&gt;To describe the mechanism behind this modes let's consider an example of actual M68000 code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mi"&gt;00000364&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="n"&gt;fa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ffa6&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;lea&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="mh"&gt;0x30c&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code&gt;lea&lt;/code&gt; instruction stores the address &lt;code&gt;0x30c&lt;/code&gt; into &lt;code&gt;a0&lt;/code&gt;, but it's pretty evident that this address mode doesn't work like the traditional Address Register Indirect with Displacement. The instruction is at address &lt;code&gt;0x364&lt;/code&gt; and if we read the displacement as usual we would expect the effective address to be at &lt;code&gt;0x364 + 0x30c&lt;/code&gt;. It is important to understand that this is what the Assembler (or the disassembler) shows, and that the proper meaning of &lt;code&gt;0x30c(pc)&lt;/code&gt; is "the address &lt;code&gt;0x30c&lt;/code&gt; knowing that this instruction is at &lt;code&gt;0x364&lt;/code&gt;". I believe this clearly shows why relocatable code makes use of this addressing mode. The address that we identify with &lt;code&gt;0x364&lt;/code&gt; might actually be anywhere in memory, as this number means only &lt;code&gt;0x364&lt;/code&gt; words after the first instruction (which is at &lt;code&gt;0x0&lt;/code&gt; in our relative space).&lt;/p&gt;
&lt;p&gt;The binary representation of the instruction is actually revealing. The hexadecimal values of the two words &lt;code&gt;41fa ffa6&lt;/code&gt; become &lt;code&gt;01000001111110101111111110100110&lt;/code&gt; which can be split as follows&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;0100&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mf"&gt;000&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mf"&gt;111&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mf"&gt;111010&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mf"&gt;1111111110100110&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;lea&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;PC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;According to the documentation of the addressing mode, the extension word &lt;code&gt;1111111110100110&lt;/code&gt; is a signed 16-bit displacement, so it is a number expressed in two's complement notation. The conversion gives &lt;code&gt;-0x5a&lt;/code&gt;, which added to the instruction relative address &lt;code&gt;0x364&lt;/code&gt; surprisingly gives &lt;code&gt;0x30a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The documentation of the addressing mode, however, states that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this mode, the operand is in memory. The address of the operand is the sum of the address in the program counter (PC) and the sign-extended 16-bit displacement integer in the extension word. The value in the PC is the address of the extension word.&lt;/p&gt;
&lt;p&gt;(2.2.11, page 13)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The thing that can be easily overlooked is that the PC points to the extension word and not to the instruction word. In this case, while the instruction word is at &lt;code&gt;0x364&lt;/code&gt;, the extension word is at &lt;code&gt;0x366&lt;/code&gt;, and &lt;code&gt;0x366 - 0x5a&lt;/code&gt; gives exactly &lt;code&gt;0x30c&lt;/code&gt;, which is what the Assembly syntax shows us. As you can see, the Assembler and the Disassembler have to perform some calculations to show the actual relative final value.&lt;/p&gt;
&lt;h2 id="resources"&gt;Resources&lt;a class="headerlink" href="#resources" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Motorola M68000 Family Programmer's Reference Manual &lt;a href="https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf"&gt;PDF here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;M68000 Microprocessors User's Manual &lt;a href="https://www.nxp.com/docs/en/reference-manual/MC68000UM.pdf"&gt;PDF here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The 68000 Principles and Programming, Leo J. Scanion, 1981&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="updates"&gt;Updates&lt;a class="headerlink" href="#updates" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2017-12-24: Reddit user &lt;a href="https://new.reddit.com/user/SpaceShrimp"&gt;SpaceShrimp&lt;/a&gt; pointed out the rage of a signed 16-bit number is &lt;code&gt;(-32768,32767)&lt;/code&gt; and not &lt;code&gt;(-32767,32768)&lt;/code&gt;. Thanks!&lt;/p&gt;
&lt;h2 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/blog_source/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Retro"></category><category term="assembly"></category><category term="M68000"></category><category term="retroprogramming"></category></entry><entry><title>Exploring the Amiga - Part 8</title><link href="https://www.thedigitalcatonline.com/blog/2019/02/19/exploring-the-amiga-8/" rel="alternate"></link><published>2019-02-19T14:00:00+01:00</published><updated>2021-12-20T08:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2019-02-19:/blog/2019/02/19/exploring-the-amiga-8/</id><summary type="html">&lt;p&gt;Branching in the M68k Assembly, memory list management in Kickstart 1.3&lt;/p&gt;</summary><content type="html">&lt;h2 id="branching"&gt;Branching&lt;a class="headerlink" href="#branching" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As branching is one of the most important ways to control the program flow it is worth discussing how it works in the Motorola 68000 processor, and review what options we have.&lt;/p&gt;&lt;p&gt;Contrary to what happens in higher level languages, in Assembly we do not have a way to represent logical expressions. In a language like C we can compare two integers with something like &lt;code&gt;a &amp;gt; b&lt;/code&gt; which tells us if the first number is greater than the second. But in Assembly there is no such syntax, so we have to rely on processor flags; these are bits that the processor sets according to the result of some operation, be it a direct comparison of two values or another instruction that manages integer numbers.&lt;/p&gt;&lt;p&gt;The Motorola 68000 flags are kept in the 5 least significant bits of the Status Register (SR). The latter is not available during the normal operations in user mode, but these 5 bits, called Condition Code Register (CCR) are always accessible. The 5 bits are named &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;Z&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt;. Of these, the ones we need to take into consideration for branching are the rightmost 4.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt; (Negative) is set to the value of the most significant bit of the result of an instruction, to show that a negative number was produced.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Z&lt;/code&gt; (Zero) is set if the result is zero.&lt;/li&gt;&lt;li&gt;&lt;code&gt;V&lt;/code&gt; (Overflow) is set when an arithmetic operation results in a number that cannot be represented with the size of the operand.&lt;/li&gt;&lt;li&gt;&lt;code&gt;C&lt;/code&gt; (Carry) is set when an addition or a subtraction need to carry a bit (carry out or borrow).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To branch according to the value of these flags we can use the &lt;code&gt;Bcc&lt;/code&gt; family of instruction, where &lt;code&gt;cc&lt;/code&gt; is a two-letter mnemonic that represents the condition that is under test. For example the condition &lt;code&gt;MI&lt;/code&gt; stands for &lt;code&gt;MInus&lt;/code&gt; and tests if the &lt;code&gt;N&lt;/code&gt; flag is set. Thus, &lt;code&gt;bmi &amp;lt;address&amp;gt;&lt;/code&gt; will branch to &lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt; if the result of the previous instruction was negative, because that instruction set the &lt;code&gt;N&lt;/code&gt; flag.&lt;/p&gt;&lt;p&gt;There are multiple families of instructions that use the CCR: &lt;code&gt;Bcc&lt;/code&gt;, &lt;code&gt;DBcc&lt;/code&gt;, &lt;code&gt;Scc&lt;/code&gt;, and &lt;code&gt;TRAPcc&lt;/code&gt;. The following table lists all the possible conditions we can test on the Motorola 68000 and their meaning&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| Instruction | Full name        | Tested condition  | Notes                 |
|-------------|------------------|-------------------|-----------------------|
| CC          | Carry Clear      | C == 0            |                       |
| CS          | Carry Set        | C == 1            |                       |
| EQ          | EQual            | Z == 1            |                       |
| F           | False            | Always false      | Not available for Bcc |
| GE          | Greater or Equal | N == V            |                       |
| GT          | Greater Than     | N == V and Z == 0 |                       |
| HI          | HIgher than      | C == 0 and Z == 0 |                       |
| LE          | Less or Equal    | Z == 1 or N != V  |                       |
| LS          | Lower or Same    | C == 1 or Z == 1  |                       |
| LT          | Less Than        | N != V            |                       |
| MI          | MInus            | N == 1            |                       |
| NE          | Not Equal        | Z == 0            |                       |
| PL          | PLus             | N == 0            |                       |
| T           | True             | Always true       | Not available for Bcc |
| VC          | V Clear          | V == 0            |                       |
| VS          | V Set            | V == 1            |                       |
|-------------|------------------|-------------------|-----------------------|
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The reason why the &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt; conditions are not available for &lt;code&gt;Bcc&lt;/code&gt; instructions is simple: &lt;code&gt;bt&lt;/code&gt; would mean "branch always", and the &lt;code&gt;bra&lt;/code&gt; instruction does exactly this, while &lt;code&gt;bf&lt;/code&gt; would mean "never branch" and it's arguably useless.&lt;/p&gt;&lt;p&gt;Let's see an example of use with a standard comparison instruction: &lt;code&gt;cmp&lt;/code&gt;&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmp.w   d0,d1
beq.b   0x1522
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Here, the processor compares &lt;code&gt;d0&lt;/code&gt; and &lt;code&gt;d1&lt;/code&gt; computing the subtraction &lt;code&gt;d1 - d0&lt;/code&gt; and setting the CCR flags according to the nature of the result. The processors manual (Programmer's Reference Manual, section 4-75, page 179) tells us that the flags are affected according to these rules&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;X&lt;/code&gt; — Not affected.&lt;/li&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt; — Set if the result is negative; cleared otherwise.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Z&lt;/code&gt; — Set if the result is zero; cleared otherwise.&lt;/li&gt;&lt;li&gt;&lt;code&gt;V&lt;/code&gt; — Set if an overflow occurs; cleared otherwise.&lt;/li&gt;&lt;li&gt;&lt;code&gt;C&lt;/code&gt; — Set if a borrow occurs; cleared otherwise.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The &lt;code&gt;beq&lt;/code&gt; instruction on the second line checks only the &lt;code&gt;Z&lt;/code&gt; flag, however, so what we are checking here is if &lt;code&gt;d0&lt;/code&gt; and &lt;code&gt;d1&lt;/code&gt; have the same value.&lt;/p&gt;&lt;p&gt;A less straightforward example involves &lt;code&gt;move&lt;/code&gt;&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;move.w  0x1c(a1),d0
beq.b   0x151e
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The first line moves the value at &lt;code&gt;a1 + 0x1c&lt;/code&gt; into &lt;code&gt;d0&lt;/code&gt;. The &lt;code&gt;move&lt;/code&gt; instruction page (Programmer's Reference Manual, section 4-116, page 220) says that it affects only the &lt;code&gt;N&lt;/code&gt; and &lt;code&gt;Z&lt;/code&gt; flags&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;X&lt;/code&gt; — Not affected.&lt;/li&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt; — Set if the result is negative; cleared otherwise.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Z&lt;/code&gt; — Set if the result is zero; cleared otherwise.&lt;/li&gt;&lt;li&gt;&lt;code&gt;V&lt;/code&gt; — Always cleared.&lt;/li&gt;&lt;li&gt;&lt;code&gt;C&lt;/code&gt; — Always cleared.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Here, the tested result is the value that has been moved. So, the next line branches only if the address &lt;code&gt;a1 + 0x1c&lt;/code&gt; (and later &lt;code&gt;d0&lt;/code&gt;) contains a zero.&lt;/p&gt;&lt;p&gt;Pay attention that &lt;code&gt;GE&lt;/code&gt;, &lt;code&gt;GT&lt;/code&gt;, &lt;code&gt;LE&lt;/code&gt;, and &lt;code&gt;LT&lt;/code&gt; read &lt;code&gt;N&lt;/code&gt;, so they should be used only with signed integers Unsigned integers, instead, should be compared using &lt;code&gt;HI&lt;/code&gt; and &lt;code&gt;LS&lt;/code&gt;.&lt;/p&gt;&lt;h2 id="enqueue"&gt;Enqueue&lt;a class="headerlink" href="#enqueue" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In the previous article we discussed the structure of a memory node created by &lt;code&gt;AddMemList&lt;/code&gt; and I briefly mentioned &lt;code&gt;Enqueue&lt;/code&gt; and a protected version of it. &lt;code&gt;Enqueue&lt;/code&gt; is the function that Exec uses to add a node into a linked list, following a simple schema based on priorities, but it turns out &lt;code&gt;AddMemList&lt;/code&gt; does not use it directly, resorting to a version of it wrapped by two other functions, namely &lt;code&gt;Forbid&lt;/code&gt; and &lt;code&gt;Permit&lt;/code&gt; that are connected to task rescheduling. For the time being, however, we may forget the wrappers and jump directly to &lt;code&gt;Enqueue&lt;/code&gt; and learn how the Amiga operating system was managing linked lists.&lt;/p&gt;&lt;p&gt;If the list we are managing is a singly linked list, where each node points to the successor only, we are forced to find the node &lt;em&gt;after which&lt;/em&gt; we want to insert the new one. This is mandatory, as we have to change its outgoing pointer, redirecting it to the new inserted node. In a doubly linked list such the ones used by the Amiga system this is not a problem, as from any point in the list we can start traversing it either forward or backward.&lt;/p&gt;&lt;p&gt;The following drawing is a simple representation of what happens in the Kickstart code when the &lt;code&gt;Enqueue&lt;/code&gt; function is executed. &lt;code&gt;Ins&lt;/code&gt; is the node we want to insert, &lt;code&gt;Pred&lt;/code&gt; is the node after which we will insert &lt;code&gt;Ins&lt;/code&gt;, and &lt;code&gt;Next&lt;/code&gt; is the node before which we will insert &lt;code&gt;Ins&lt;/code&gt;.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                                  TAILPRED  TAIL
                                     |       |
                                     v       v
BEFORE:       HEAD -&amp;gt; Node -&amp;gt; Pred -&amp;gt; Next -&amp;gt; Node -&amp;gt; 0x0


                                         TAILPRED  TAIL
                                            |       |
                                            v       v
AFTER:        HEAD -&amp;gt; Node -&amp;gt; Pred           Next -&amp;gt; Node -&amp;gt; 0x0
                                  |         ^
                                  |         |
                                  +-&amp;gt; Ins --+
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;As you can see there are several pointers that need to be changed. Both the &lt;code&gt;LN_SUCC&lt;/code&gt; of &lt;code&gt;Pred&lt;/code&gt; and &lt;code&gt;Ins&lt;/code&gt;, but also the &lt;code&gt;LN_PRED&lt;/code&gt; of &lt;code&gt;Next&lt;/code&gt; and &lt;code&gt;Ins&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Enqueue&lt;/code&gt; has a very simple prototype&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Enqueue(list, node)
        aO    a1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;a0&lt;/code&gt; and &lt;code&gt;a1&lt;/code&gt; are pointers respectively to the list header and to the node we are going to insert. It is worth recalling how the list header status is at the time when the first insertion happens, that is when either the chip or expansion memory are added to the system memory pool, managed through &lt;code&gt;MemList&lt;/code&gt;. The latter is a list header &lt;code&gt;LH&lt;/code&gt; structure and the actual values are the following&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    0xe +-------+ 0x150
        |       |
    0xd +-------+ 0x14f (LH_pad)
        | 0xa   |
    0xc +-------+ 0x14e (LH_TYPE)
        | 0x142 |
    0x8 +-------+ 0x14a (LH_TAILPRED)
        | 0x0   |
    0x4 +-------+ 0x146 (LH_TAIL)
        | 0x146 |
    0x0 +-------+ 0x142 (LH_HEAD)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;With this structure in mind, let's dive into the source code of &lt;code&gt;Enqueue&lt;/code&gt;. The function is defined at &lt;code&gt;0xfc1670&lt;/code&gt;&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001670: 1229 0009                 move.b  0x9(a1),d1
00001674: 2010                      move.l  (a0),d0
00001676: 2040                      movea.l d0,a0
00001678: 2010                      move.l  (a0),d0
0000167a: 6706                      beq.b   0x1682
0000167c: b228 0009                 cmp.b   0x9(a0),d1
00001680: 6ff4                      ble.b   0x1676
00001682: 2028 0004                 move.l  0x4(a0),d0
00001686: 2149 0004                 move.l  a1,0x4(a0)
0000168a: 2288                      move.l  a0,(a1)
0000168c: 2340 0004                 move.l  d0,0x4(a1)
00001690: 2040                      movea.l d0,a0
00001692: 2089                      move.l  a1,(a0)
00001694: 4e75                      rts     
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;And it can be roughly divided into three sections, according to the internal jumps.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Init:
00001670: 1229 0009                 move.b  0x9(a1),d1
00001674: 2010                      move.l  (a0),d0

FindPos:
00001676: 2040                      movea.l d0,a0
00001678: 2010                      move.l  (a0),d0
0000167a: 6706                      beq.b   InsertNode
0000167c: b228 0009                 cmp.b   0x9(a0),d1
00001680: 6ff4                      ble.b   FindPos

InsertNode:
00001682: 2028 0004                 move.l  0x4(a0),d0
00001686: 2149 0004                 move.l  a1,0x4(a0)
0000168a: 2288                      move.l  a0,(a1)
0000168c: 2340 0004                 move.l  d0,0x4(a1)
00001690: 2040                      movea.l d0,a0
00001692: 2089                      move.l  a1,(a0)
00001694: 4e75                      rts     
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The first section, &lt;code&gt;Init&lt;/code&gt;, prepares the execution of the rest of the function. The rest bla&lt;/p&gt;&lt;p&gt;As I did for other functions in the previous articles, I'm going to dissect this line by line. Let's start from the &lt;code&gt;Init&lt;/code&gt; part.&lt;/p&gt;&lt;h3 id="init"&gt;Init&lt;/h3&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Init:
00001670: 1229 0009                 move.b  0x9(a1),d1
00001674: 2010                      move.l  (a0),d0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Since &lt;code&gt;a1&lt;/code&gt; points to the node to be inserted, &lt;code&gt;0x9(a1)&lt;/code&gt; is the &lt;code&gt;LN_PRI&lt;/code&gt; field of that node, that is the priority. The first line thus stores it in &lt;code&gt;d1&lt;/code&gt; because it will be used to search for the insertion point, as the list is maintained in priority order.&lt;/p&gt;&lt;p&gt;The second line is the core or the node traversal algorithm. Since &lt;code&gt;a0&lt;/code&gt; points to a &lt;code&gt;LH&lt;/code&gt; structure, it is also the address of the first field &lt;code&gt;LH_HEAD&lt;/code&gt;. &lt;code&gt;(a0)&lt;/code&gt;, thus, is the dereferencing of that address, which means the address of the first node in the list. Given the figures I showed before for &lt;code&gt;MemList&lt;/code&gt;, &lt;code&gt;a0&lt;/code&gt; is &lt;code&gt;0x142&lt;/code&gt; so a &lt;code&gt;move a0,d0&lt;/code&gt; would store &lt;code&gt;0x142&lt;/code&gt; (the value of &lt;code&gt;a0&lt;/code&gt;) in &lt;code&gt;d0&lt;/code&gt;. &lt;code&gt;(a0)&lt;/code&gt;, instead, is the content of that address in memory, namely &lt;code&gt;0x146&lt;/code&gt;, so &lt;code&gt;move (a0),d0&lt;/code&gt; stores &lt;code&gt;0x146&lt;/code&gt; (the content of &lt;code&gt;0x142&lt;/code&gt;) in &lt;code&gt;d0&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Putting aside the intricacies of the addressing modes, the second line stores the address of the first node in the list, which is the part of the header that starts with &lt;code&gt;LH_TAIL&lt;/code&gt;. The header thus acts as the first node of the list.&lt;/p&gt;&lt;h3 id="findpos"&gt;FindPos&lt;/h3&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FindPos:
00001676: 2040                      movea.l d0,a0
00001678: 2010                      move.l  (a0),d0
0000167a: 6706                      beq.b   InsertNode
0000167c: b228 0009                 cmp.b   0x9(a0),d1
00001680: 6ff4                      ble.b   FindPos
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The first two lines repeat the same algorithm. The address of the current node (&lt;code&gt;d0&lt;/code&gt;) is moved to &lt;code&gt;a0&lt;/code&gt; and the dereferencing operation &lt;code&gt;(a0)&lt;/code&gt; puts in &lt;code&gt;d0&lt;/code&gt; the address of the following node. The reason why we do it in two lines is that the Address Register Indirect Mode can be used only with &lt;code&gt;An&lt;/code&gt; registers. At this point &lt;code&gt;d0&lt;/code&gt; contains the address of the second node, the successor of the header.&lt;/p&gt;&lt;p&gt;If the list contains at least one node, &lt;code&gt;d0&lt;/code&gt; contains its address. But if the list is empty at this point &lt;code&gt;d0&lt;/code&gt; contains &lt;code&gt;0x0&lt;/code&gt;, and this is the condition tested by the &lt;code&gt;beq.b&lt;/code&gt; instruction. If &lt;code&gt;d0&lt;/code&gt; is empty we reached the end of the list, which means that there was no better place to insert the node, and we jump to the actual node insertion code, &lt;code&gt;InsertNode&lt;/code&gt;. If the value is not zero, the current node has a proper successor, so let's check it's priority to see if we need to go on or if we can stop here. The code compares the priorities of the current node and of the &lt;code&gt;Ins&lt;/code&gt; node, and if the latter is less than the former we can loop back to &lt;code&gt;FindPos&lt;/code&gt; and move to the next node. Remember that priorities are expressed with negative numbers only, so "less than" actually means "higher priority".&lt;/p&gt;&lt;h3 id="insertnode"&gt;InsertNode&lt;/h3&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;InsertNode:
00001682: 2028 0004                 move.l  0x4(a0),d0
00001686: 2149 0004                 move.l  a1,0x4(a0)
0000168a: 2288                      move.l  a0,(a1)
0000168c: 2340 0004                 move.l  d0,0x4(a1)
00001690: 2040                      movea.l d0,a0
00001692: 2089                      move.l  a1,(a0)
00001694: 4e75                      rts     
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;In either case, when we reach the tail or when the priority of the next node is lower than the one of the new node, we reach &lt;code&gt;InsertNode&lt;/code&gt;. At this point &lt;code&gt;a0&lt;/code&gt; points to &lt;code&gt;Next&lt;/code&gt; and we can access &lt;code&gt;Pred&lt;/code&gt; through &lt;code&gt;0x4(a0)&lt;/code&gt; (that is &lt;code&gt;LN_SUCC&lt;/code&gt; of &lt;code&gt;Next&lt;/code&gt;).&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001682: 2028 0004                 move.l  0x4(a0),d0
00001686: 2149 0004                 move.l  a1,0x4(a0)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This first stores the aforementioned address of &lt;code&gt;Pred&lt;/code&gt; in &lt;code&gt;d0&lt;/code&gt;, then replaces it with the value of &lt;code&gt;a1&lt;/code&gt;. The result is that the predecessor of &lt;code&gt;Next&lt;/code&gt; becomes &lt;code&gt;Ins&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;----m68k 0000168a: 2288                      move.l  a0,(a1) 0000168c: 2340 0004                 move.l  d0,0x4(a1) ----&lt;/p&gt;&lt;p&gt;This moves &lt;code&gt;a0&lt;/code&gt;, the address of &lt;code&gt;Next&lt;/code&gt;, into the first field of &lt;code&gt;Ins&lt;/code&gt;, that is &lt;code&gt;Next&lt;/code&gt; becomes the successor of &lt;code&gt;Ins&lt;/code&gt;. The second line moves &lt;code&gt;d0&lt;/code&gt; (the address of &lt;code&gt;Pred&lt;/code&gt;) into the &lt;code&gt;LN_PRED&lt;/code&gt; of &lt;code&gt;Ins&lt;/code&gt;.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001690: 2040                      movea.l d0,a0
00001692: 2089                      move.l  a1,(a0)
00001694: 4e75                      rts     
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Last, the address of &lt;code&gt;Ins&lt;/code&gt; becomes the &lt;code&gt;LN_SUCC&lt;/code&gt; of &lt;code&gt;Pred&lt;/code&gt;, so we move &lt;code&gt;d0&lt;/code&gt; into &lt;code&gt;a0&lt;/code&gt; because, as I already mentioned, the Address Register Indirect Mode can be used only with &lt;code&gt;An&lt;/code&gt; registers. After this the function returns to the caller.&lt;/p&gt;&lt;h2 id="remove"&gt;Remove&lt;a class="headerlink" href="#remove" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Since we reviewed the code of &lt;code&gt;Enqueue&lt;/code&gt; it makes sense to have a look at the opposite function, &lt;code&gt;Remove&lt;/code&gt;. A protected version of this exists as well, but here I will just show the code of the pure function without the wrapper.&lt;/p&gt;&lt;p&gt;Removing a node is simpler than adding it, as all we have to do is to make &lt;code&gt;Pred&lt;/code&gt; point to &lt;code&gt;Next&lt;/code&gt; and vice versa, so the function is much shorter. It's worth noting that while the function accepts the address of the node in &lt;code&gt;a1&lt;/code&gt; the value in this register is eventually overwritten, so the address has to be kept elsewhere when the function is called.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0000163c: 2051                      movea.l (a1),a0
0000163e: 2269 0004                 movea.l 0x4(a1),a1
00001642: 2288                      move.l  a0,(a1)
00001644: 2149 0004                 move.l  a1,0x4(a0)
00001648: 4e75 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The first two lines store the address of &lt;code&gt;Next&lt;/code&gt; in &lt;code&gt;a0&lt;/code&gt; and of &lt;code&gt;Pred&lt;/code&gt; in &lt;code&gt;a1&lt;/code&gt; (overwriting the input value). The third line makes &lt;code&gt;Next&lt;/code&gt; the successor of &lt;code&gt;Pred&lt;/code&gt; and the fourth line makes &lt;code&gt;Pred&lt;/code&gt; the predecessor of &lt;code&gt;Next&lt;/code&gt;. Then the function returns to the caller.&lt;/p&gt;&lt;h2 id="addlibrary"&gt;AddLibrary&lt;a class="headerlink" href="#addlibrary" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In the &lt;a href="https://www.thedigitalcatonline.com/blog/2018/06/25/exploring-the-amiga-6/"&gt;6th post&lt;/a&gt; of this series we left Kickstart just after it finished adding the physical memory to the system pool. The last instruction we mentioned was a call to &lt;code&gt;AddLibrary&lt;/code&gt;, and this is then the next function I will explore.&lt;/p&gt;&lt;p&gt;The code of the function is at &lt;code&gt;fc1448&lt;/code&gt;, and required some work before I was able to read it (see the section "Manual decompilation").&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001448: 41ee 017a                 lea 0x17a(a6),a0
0000144c: 6100 0270                 bsr.w 0x16be
00001450: 6100 0082                 bsr.w 0x14d4
00001454: 4e75                      rts     
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The first line loads the absolute address of an object &lt;code&gt;0x17a&lt;/code&gt; bytes after the ExecBase address, and looking up this displacement in the library structure published in both the fifth and sixth instalment we find, rather unsurprisingly, that this is the address of &lt;code&gt;LibList&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The following lines call the protected version of &lt;code&gt;Enqueue&lt;/code&gt; and &lt;code&gt;SumLibrary&lt;/code&gt;, after which the routine returns to the caller. The call to &lt;code&gt;Enqueue&lt;/code&gt; follows what I explained at the beginning of this post, where this time &lt;code&gt;a0&lt;/code&gt; points to the library system list and &lt;code&gt;a1&lt;/code&gt; points to the base address of Exec, set just before the call to &lt;code&gt;AddLibrary&lt;/code&gt;. So the Exec library itself is added to the system libraries through this routine.&lt;/p&gt;&lt;p&gt;&lt;code&gt;SumLibrary&lt;/code&gt;, as the name suggests, computes the checksum of a library, or checks the existing one.&lt;/p&gt;&lt;h2 id="manual-decompilation"&gt;Manual decompilation&lt;a class="headerlink" href="#manual-decompilation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When I was following the call to &lt;code&gt;AddLibrary&lt;/code&gt; from the main body of Kickstart I was surprised to find this code&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001446: 0000 41ee                 ori.b   #-0x12,d0
0000144a: 017a 6100                 bchg    d0,0x754c(pc)
0000144e: 0270 6100 0082            andi.w  #0x6100,(-0x7e,a0,d0.w)
00001454: 4e75                      rts     
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;which at first glance doesn't look like a basic function, as the instructions are too convoluted. Furthermore, the branch uses the address &lt;code&gt;0x1448&lt;/code&gt;, which is thus supposed to be the beginning of the function. A quick look at the hexadecimal values reveals the truth: at &lt;code&gt;0x1446&lt;/code&gt; Kickstart contains a padding word &lt;code&gt;0000&lt;/code&gt; that confused the decompiler. To see the code of the function I had to manually decompile the machine code, and since the process is very interesting I decided to show it in detail here.&lt;/p&gt;&lt;p&gt;When you try to manually decompile some machine code you need a cheat sheet and the processor manual (see the resources section), which can help you to quickly track down the meaning of the single bits. The values we are interested in are&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001448: 41ee
0000144a: 017a
0000144c: 6100
0000144e: 0270
00001450: 6100
00001452: 0082
00001454: 4e75
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;since &lt;code&gt;fc1456&lt;/code&gt; is listed as the address of the &lt;code&gt;RemLibrary&lt;/code&gt; function. The binary representation of these values is&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001448: 0100 0001 1110 1110
0000144a: 0000 0001 0111 1010
0000144c: 0110 0001 0000 0000
0000144e: 0000 0010 0111 0000
00001450: 0110 0001 0000 0000
00001452: 0000 0000 1000 0010
00001454: 0100 1110 0111 0101
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Now, the first 4 bits of any Motorola 68k instruction are the instruction code. While multiple instructions share the same 4 bits (for example &lt;code&gt;andi&lt;/code&gt; and &lt;code&gt;subi&lt;/code&gt;), those bits are never used for addressing or to specify modes, so they are a good starting point.&lt;/p&gt;&lt;p&gt;The instruction at &lt;code&gt;0x1448&lt;/code&gt; starts with &lt;code&gt;0100&lt;/code&gt; followed by a &lt;code&gt;0&lt;/code&gt;, and this narrows the selection to a bunch of instructions: some types of &lt;code&gt;move&lt;/code&gt;, &lt;code&gt;negx&lt;/code&gt;, &lt;code&gt;clr&lt;/code&gt;, &lt;code&gt;neg&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, &lt;code&gt;lea&lt;/code&gt;, &lt;code&gt;chk&lt;/code&gt;. Among these, only &lt;code&gt;lea&lt;/code&gt; or &lt;code&gt;chk&lt;/code&gt; can be followed by &lt;code&gt;0001&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Both instructions use the following 3 bits to specify a register (&lt;code&gt;An&lt;/code&gt; for &lt;code&gt;lea&lt;/code&gt;, &lt;code&gt;Dn&lt;/code&gt; for &lt;code&gt;chk&lt;/code&gt;), but then the first has a fixed group &lt;code&gt;111&lt;/code&gt;, while the second has a group &lt;code&gt;110&lt;/code&gt;. This means that we are looking at a &lt;code&gt;lea&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The three bits after &lt;code&gt;0100&lt;/code&gt; are &lt;code&gt;000&lt;/code&gt;, which translates to &lt;code&gt;a0&lt;/code&gt; as a target. The last 6 bits are the addressing mode and the register, and the cheat sheet tells us that &lt;code&gt;101 110&lt;/code&gt; corresponds to Address Register Indirect with Displacement Mode on &lt;code&gt;a6&lt;/code&gt;. &lt;code&gt;101&lt;/code&gt; is labelled as &lt;code&gt;(d16, An)&lt;/code&gt;, while &lt;code&gt;110&lt;/code&gt; is the number 6. The following word is thus the &lt;code&gt;d16&lt;/code&gt; displacement from &lt;code&gt;a6&lt;/code&gt;, which means that &lt;code&gt;41ee 017a&lt;/code&gt; translates to &lt;code&gt; lea 0x17a(a6),a0&lt;/code&gt;.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lea   a0   (d16,An)         0x17a
 |    |       |               |
 v    v       v      |-----------------|
0100 000 111 101 110 0000 0001 0111 1010
          ^       ^
	  |       |
	fixed     a6

00001448: 41ee 017a     lea 0x17a(a6),a0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The second instruction starts at &lt;code&gt;0x144c&lt;/code&gt; with &lt;code&gt;0110&lt;/code&gt;, which is the signature of all the branch commands: &lt;code&gt;bra&lt;/code&gt;, &lt;code&gt;bsr&lt;/code&gt;, and all the condition-based ones like &lt;code&gt;bgt&lt;/code&gt;, &lt;code&gt;blt&lt;/code&gt;, and so on. Since the following 4 bits are &lt;code&gt;0001&lt;/code&gt; we know this is a &lt;code&gt;bsr&lt;/code&gt;, branch to subroutine. Now, in this instruction the 8 least significant bits tell us what the displacement is, and thus the type of the operand (Programmer's Manual, section 4-59, page 163). In this case they are all &lt;code&gt;0&lt;/code&gt;, which means a word displacement, which is in the next 16 bits. Pay attention that, as we discussed for &lt;code&gt;lea&lt;/code&gt; in the &lt;a href="https://www.thedigitalcatonline.com/blog/2018/05/28/exploring-the-amiga-1/"&gt;first post&lt;/a&gt; the Program Counter contains the address of the first displacement word. In this case the displacement is &lt;code&gt;0x270&lt;/code&gt; at address &lt;code&gt;0x144e&lt;/code&gt;, so the branch address is the sum of the two, that is &lt;code&gt;0x16be&lt;/code&gt;.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   bsr   displacement
    |         |
|-------| |-------|
0110 0001 0000 0000 0000 0010 0111 0000
                    |-----------------|
		             |
			   0x270 (+ 0x144e = 0x16be)

0000144c: 6100 0270     bsr.w 0x16be
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The third instruction is again a &lt;code&gt;bsr&lt;/code&gt; and following the same process we find out that the branch address is the sum between &lt;code&gt;0x82&lt;/code&gt; and &lt;code&gt;0x1452&lt;/code&gt;, that is &lt;code&gt;0x14d4&lt;/code&gt;.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   bsr   displacement
    |         |
|-------| |-------|
0110 0001 0000 0000 0000 0000 1000 0010
                    |-----------------|
		             |
			    0x82 (+ 0x1452 = 0x14d4)

00001450: 6100 0082     bsr.w 0x14d4
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The final instruction is an &lt;code&gt;rts&lt;/code&gt;, as we expected, and as the decompiler correctly told us. The disassembled code is then what we used in the previous section&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001448: 41ee 017a                 lea 0x17a(a6),a0
0000144c: 6100 0270                 bsr.w 0x16be
00001450: 6100 0082                 bsr.w 0x14d4
00001454: 4e75                      rts     
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The most important thing to keep in mind when manually reading instructions is the position of the Program Counter. As we already saw two times, with &lt;code&gt;lea&lt;/code&gt; and with &lt;code&gt;bsr&lt;/code&gt;, the PC moves as soon as the 16-bit instruction has been read, which means that when a displacement is given we have to use the address of the displacement itself as a base for our calculations.&lt;/p&gt;&lt;h2 id="resources"&gt;Resources&lt;a class="headerlink" href="#resources" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Motorola M68000 Family Programmer's Reference Manual - &lt;a href="https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf"&gt;https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Motorola 68000 Opcodes Cheat Sheet - &lt;a href="http://goldencrystal.free.fr/M68kOpcodes-v2.3.pdf"&gt;http://goldencrystal.free.fr/M68kOpcodes-v2.3.pdf&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/blog_source/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Retro"></category><category term="assembly"></category><category term="amiga"></category><category term="retroprogramming"></category></entry><entry><title>Exploring the Amiga - Part 7</title><link href="https://www.thedigitalcatonline.com/blog/2019/02/19/exploring-the-amiga-7/" rel="alternate"></link><published>2019-02-19T13:00:00+01:00</published><updated>2021-02-26T08:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2019-02-19:/blog/2019/02/19/exploring-the-amiga-7/</id><summary type="html">&lt;p&gt;The complete Exec vector table, list management in Kickstart 1.3&lt;/p&gt;</summary><content type="html">&lt;h2 id="the-complete-exec-vector-table"&gt;The complete Exec vector table&lt;a class="headerlink" href="#the-complete-exec-vector-table" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In &lt;a href="https://www.thedigitalcatonline.com/blog/2018/06/08/exploring-the-amiga-3/"&gt;the 3rd post&lt;/a&gt; of this series I showed the Exec vectors table and the way &lt;code&gt;MakeFunctions&lt;/code&gt; creates the jump table when Exec is installed in memory. In that post I focused on the first 4 reserved vectors, but it is useful to have the full table while reading the Kickstart code. This is the full vectors table for Exec 34.2 (28 Oct 1987).&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;&lt;/strong&gt;Relative offset&lt;strong&gt;&lt;/strong&gt; column contains the offset of the function in the jump table once the library has been installed, which allows any Amiga program to call Exec functions through the &lt;code&gt;offset(a6)&lt;/code&gt; syntax (e.g. &lt;code&gt;OpenLibrary&lt;/code&gt; can be called by &lt;code&gt;jsr -0x228(a6)&lt;/code&gt;). &lt;strong&gt;&lt;/strong&gt;Vector position&lt;strong&gt;&lt;/strong&gt; is the offset of the vector in the Kickstart 1.3 ROM (i.e. &lt;code&gt;0x0001a7c&lt;/code&gt; is the position of the vector table itself), &lt;strong&gt;&lt;/strong&gt;Relative address&lt;strong&gt;&lt;/strong&gt; is the hexadecimal value stored in the table before the relocation, &lt;strong&gt;&lt;/strong&gt;Absolute address&lt;strong&gt;&lt;/strong&gt; is the function position after relocation (i.e. the wrapped sum between the table address and the relative address), and &lt;strong&gt;&lt;/strong&gt;Function&lt;strong&gt;&lt;/strong&gt; is the function name according to the include files and the Amiga documentation.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| Relative offset | Vector position | Relative address | Absolute address | Function                 |
|-----------------|-----------------|------------------|------------------|--------------------------|
| -0x00           | 00001a7c        | 08a0             | 0000231c         | Open()                   |
| -0x06           | 00001a7e        | 08a8             | 00002324         | Close()                  |
| -0x12           | 00001a80        | 08ac             | 00002328         | Expunge()                |
| -0x18           | 00001a82        | 08ac             | 00002328         | Reserved for future use  |
| -0x1e           | 00001a84        | ee6a             | 000008e6         | Supervisor()             |
| -0x24           | 00001a86        | f420             | 00000e9c         | ExitIntr()               |
| -0x2a           | 00001a88        | f446             | 00000ec2         | Schedule()               |
| -0x30           | 00001a8a        | 04f8             | 00001f74         | Reschedule()             |
| -0x36           | 00001a8c        | f4a0             | 00000f1c         | Switch()                 |
| -0x3c           | 00001a8e        | f4ea             | 00000f66         | Dispatch()               |
| -0x42           | 00001a90        | f58e             | 0000100a         | Exception()              |
| -0x48           | 00001a92        | f0b0             | 00000b2c         | InitCode()               |
| -0x4e           | 00001a94        | f188             | 00000c04         | InitStruct()             |
| -0x54           | 00001a96        | faac             | 00001528         | MakeLibrary()            |
| -0x5a           | 00001a98        | fb36             | 000015b2         | MakeFunctions()          |
| -0x60           | 00001a9a        | f080             | 00000afc         | FindResident()           |
| -0x66           | 00001a9c        | f0e8             | 00000b64         | InitResident()           |
| -0x6c           | 00001a9e        | 1596             | 00003012         | Alert()                  |
| -0x72           | 00001aa0        | 08ee             | 0000236a         | Debug()                  |
| -0x78           | 00001aa2        | f9ac             | 00001428         | Disable()                |
| -0x7e           | 00001aa4        | f9ba             | 00001436         | Enable()                 |
| -0x84           | 00001aa6        | 051a             | 00001f96         | Forbid()                 |
| -0x8a           | 00001aa8        | 0520             | 00001f9c         | Permit()                 |
| -0x90           | 00001aaa        | f6e2             | 0000115e         | SetSR()                  |
| -0x96           | 00001aac        | f708             | 00001184         | SuperState()             |
| -0x9c           | 00001aae        | f734             | 000011b0         | UserState()              |
| -0xa2           | 00001ab0        | f74e             | 000011ca         | SetIntVector()           |
| -0xa8           | 00001ab2        | f794             | 00001210         | AddIntServer()           |
| -0xae           | 00001ab4        | f7d4             | 00001250         | RemIntServer()           |
| -0xb4           | 00001ab6        | f8e0             | 0000135c         | Cause()                  |
| -0xba           | 00001ab8        | fc5c             | 000016d8         | Allocate()               |
| -0xc0           | 00001ac0        | fcc4             | 00001740         | Deallocate()             |
| -0xc6           | 00001abc        | fd54             | 000017d0         | AllocMem()               |
| -0xcc           | 00001abe        | fe00             | 0000187c         | AllocAbs()               |
| -0xd2           | 00001ac0        | fdb0             | 0000182c         | FreeMem()                |
| -0xd8           | 00001ac2        | fe90             | 0000190c         | AvailMem()               |
| -0xde           | 00001ac4        | fede             | 0000195a         | AllocEntry()             |
| -0xe4           | 00001ac6        | ff6c             | 000019e8         | FreeEntry()              |
| -0xea           | 00001ac8        | fb6c             | 000015e8         | Insert()                 |
| -0xf0           | 00001aca        | fb98             | 00001614         | AddHead()                |
| -0xf6           | 00001acc        | fba8             | 00001624         | AddTail()                |
| -0xfc           | 00001ace        | fbc0             | 0000163c         | Remove()                 |
| -0x102          | 00001ad0        | fbce             | 0000164a         | RemHead()                |
| -0x108          | 00001ad2        | fbde             | 0000165a         | RemTail()                |
| -0x10e          | 00001ad4        | fbf4             | 00001670         | Enqueue()                |
| -0x114          | 00001ad6        | fc1a             | 00001696         | FindName()               |
| -0x11a          | 00001ad8        | 0208             | 00001c84         | AddTask()                |
| -0x120          | 00001ada        | 02b4             | 00001d30         | RemTask()                |
| -0x126          | 00001adc        | 0334             | 00001db0         | FindTask()               |
| -0x12c          | 00001ade        | 0388             | 00001e04         | SetTaskPri()             |
| -0x132          | 00001ae0        | 03e2             | 00001e5e         | SetSignal()              |
| -0x138          | 00001ae2        | 03d8             | 00001e54         | SetExcept()              |
| -0x13e          | 00001ae4        | 0490             | 00001f0c         | Wait()                   |
| -0x144          | 00001ae6        | 0408             | 00001e84         | Signal()                 |
| -0x14a          | 00001ae8        | 0584             | 00002000         | AllocSignal()            |
| -0x150          | 00001aea        | 05bc             | 00002038         | FreeSignal()             |
| -0x156          | 00001aec        | 054e             | 00001fca         | AllocTrap()              |
| -0x15c          | 00001aee        | 0574             | 00001ff0         | FreeTrap()               |
| -0x162          | 00001af0        | 00d8             | 00001b54         | AddPort()                |
| -0x168          | 00001af2        | 00f0             | 00001b6c         | RemPort()                |
| -0x16e          | 00001af4        | 00f4             | 00001b70         | PutMsg()                 |
| -0x174          | 00001af6        | 016e             | 00001bea         | GetMsg()                 |
| -0x17a          | 00001af8        | 019c             | 00001c18         | ReplyMsg()               |
| -0x180          | 00001afa        | 01b6             | 00001c32         | WaitPort()               |
| -0x186          | 00001afc        | 01de             | 00001c5a         | FindPort()               |
| -0x18c          | 00001afe        | f9cc             | 00001448         | AddLibrary()             |
| -0x192          | 00001b00        | f9da             | 00001456         | RemLibrary()             |
| -0x198          | 00001b02        | f9f0             | 0000146c         | OldOpenLibrary()         |
| -0x19e          | 00001b04        | fa26             | 000014a2         | CloseLibrary()           |
| -0x1a4          | 00001b06        | fa3a             | 000014b6         | SetFunction()            |
| -0x1aa          | 00001b08        | fa58             | 000014d4         | SumLibrary()             |
| -0x1b0          | 00001b0a        | ec14             | 00000690         | AddDevice()              |
| -0x1b6          | 00001b0c        | ec22             | 0000069e         | RemDevice()              |
| -0x1bc          | 00001b0e        | ec26             | 000006a2         | OpenDevice()             |
| -0x1c2          | 00001b10        | ec74             | 000006f0         | CloseDevice()            |
| -0x1c8          | 00001b12        | ec9c             | 00000718         | DoIO()                   |
| -0x1ce          | 00001b14        | ec8a             | 00000706         | SendIO()                 |
| -0x1d4          | 00001b16        | ed0e             | 0000078a         | CheckIO()                |
| -0x1da          | 00001b18        | ecb2             | 0000072e         | WaitIO()                 |
| -0x1e0          | 00001b1a        | ed2a             | 000007a6         | AbortIO()                |
| -0x1e6          | 00001b1c        | 01e8             | 00001c64         | AddResource()            |
| -0x1ec          | 00001b1e        | 01f0             | 00001c6c         | RemResource()            |
| -0x1f2          | 00001b20        | 01f4             | 00001c70         | OpenResource()           |
| -0x1f8          | 00001b22        | 07b8             | 00002234         | execPrivate7()           |
| -0x1fe          | 00001b24        | 07c2             | 0000223e         | execPrivate8()           |
| -0x204          | 00001b26        | 07ee             | 0000226a         | execPrivate9()           |
| -0x20a          | 00001b28        | 06a8             | 00002124         | RawDoFmt()               |
| -0x210          | 00001b2a        | f700             | 0000117c         | GetCC()                  |
| -0x216          | 00001b2c        | fdda             | 00001856         | TypeOfMem()              |
| -0x21c          | 00001b2e        | 131c             | 00002d98         | Procure()                |
| -0x222          | 00001b30        | 1332             | 00002dae         | Vacate()                 |
| -0x228          | 00001b32        | f9f8             | 00001474         | OpenLibrary()            |
| -0x22e          | 00001b34        | 1354             | 00002dd0         | InitSemaphore()          |
| -0x234          | 00001b36        | 1374             | 00002df0         | ObtainSemaphore()        |
| -0x23a          | 00001b38        | 13c4             | 00002e40         | ReleaseSemaphore()       |
| -0x240          | 00001b3a        | 1428             | 00002ea4         | AttemptSemaphore()       |
| -0x246          | 00001b3c        | 1458             | 00002ed4         | ObtainSemaphoreList()    |
| -0x24c          | 00001b3e        | 14ce             | 00002f4a         | ReleaseSemaphoreList()   |
| -0x252          | 00001b40        | 14f4             | 00002f70         | FindSemaphore()          |
| -0x258          | 00001b42        | 14e4             | 00002f60         | AddSemaphore()           |
| -0x25e          | 00001b44        | 14f0             | 00002f6c         | RemSemaphore()           |
| -0x264          | 00001b46        | effc             | 00000a78         | SumKickData()            |
| -0x26a          | 00001b48        | ffaa             | 00001a26         | AddMemList()             |
| -0x270          | 00001b4a        | 1504             | 00002f80         | CopyMem()                |
| -0x276          | 00001b4c        | 1500             | 00002f7c         | CopyMemQuick()           |
|-----------------|-----------------|------------------|------------------|--------------------------|
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 id="the-memory-list-header"&gt;The memory list header&lt;a class="headerlink" href="#the-memory-list-header" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Before we dig into the code of the &lt;code&gt;AddMemList&lt;/code&gt; function to see how the memory space is added to the free memory list, let's have a look at the status of the memory list itself, as we need to be familiar with its structure to understand the rest of the process.&lt;/p&gt;&lt;p&gt;You might recall from the &lt;a href="https://www.thedigitalcatonline.com/blog/2018/06/25/exploring-the-amiga-5/"&gt;fifth article&lt;/a&gt; that the &lt;code&gt;MemList&lt;/code&gt; structure is created &lt;code&gt;0x142&lt;/code&gt; bytes after ExecBase, and that the structure is the following&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    0xe +-------+ 0x150
        |       |
    0xd +-------+ 0x14f (LH_pad)
        | 0xa   |
    0xc +-------+ 0x14e (LH_TYPE)
        | 0x142 |
    0x8 +-------+ 0x14a (LH_TAILPRED)
        | 0x0   |
    0x4 +-------+ 0x146 (LH_TAIL)
        | 0x146 |
    0x0 +-------+ 0x142 (LH_HEAD)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This means that we can access the memory list with &lt;code&gt;lea 0x142(a6),a0&lt;/code&gt;, as &lt;code&gt;0x142&lt;/code&gt; is the relative address, i.e. assuming ExecBase is 0. Once the absolute address is in one of the address registers we can access the first node through &lt;code&gt;(a0)&lt;/code&gt;, which is the Motorola Assembly version of the C pointer dereference operation (Address Register Indirect Mode). With &lt;code&gt;(a0)&lt;/code&gt; we do not use the content of &lt;code&gt;a0&lt;/code&gt;, but the content of the memory location which address is contained in &lt;code&gt;a0&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;So if &lt;code&gt;a0&lt;/code&gt; is &lt;code&gt;0x142&lt;/code&gt; in the previous figure, &lt;code&gt;(a0)&lt;/code&gt; is &lt;code&gt;0x0&lt;/code&gt; (&lt;code&gt;0x142&lt;/code&gt; contains &lt;code&gt;0x146&lt;/code&gt;, &lt;code&gt;0x146&lt;/code&gt; contains &lt;code&gt;0x0&lt;/code&gt;). It's thus convenient to think of &lt;code&gt;a0&lt;/code&gt; as the pointer, and of &lt;code&gt;(a0)&lt;/code&gt; as the value.&lt;/p&gt;&lt;p&gt;It is also interesting to note that the structure at &lt;code&gt;0x146&lt;/code&gt; is very similar to the &lt;code&gt;LN&lt;/code&gt; structure. Recall that the latter is defined in &lt;code&gt;include_i/exec/nodes.i&lt;/code&gt; as&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; STRUCTURE    LN,0    ; List Node
    APTR    LN_SUCC ; Pointer to next (successor)
    APTR    LN_PRED ; Pointer to previous (predecessor)
    UBYTE   LN_TYPE
    BYTE    LN_PRI  ; Priority, for sorting
    APTR    LN_NAME ; ID string, null terminated
    LABEL   LN_SIZE ; Note: word aligned
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;and as you can see &lt;code&gt;LH_TAIL&lt;/code&gt;, &lt;code&gt;LH_TAILPRED&lt;/code&gt;, and &lt;code&gt;LH_TYPE&lt;/code&gt; can act as a proper node of a linked list. This is done on purpose (obviously), as the tail of the list has to be processed by the code that manages linked lists.&lt;/p&gt;&lt;h2 id="adding-free-memory-to-the-system-list"&gt;Adding free memory to the system list&lt;a class="headerlink" href="#adding-free-memory-to-the-system-list" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;At the end of the &lt;a href="https://www.thedigitalcatonline.com/blog/2018/06/25/exploring-the-amiga-6/"&gt;previous post&lt;/a&gt; we left Exec just after its code prepared the parameters of the free memory that was available on the system. As we saw in that post, this operation is always executed for the chip memory, and optionally for the fast memory if the hardware expansion is installed.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;AddMemList&lt;/code&gt; function at &lt;code&gt;0x1a26&lt;/code&gt; is called with the following prototype&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;size = AddMemList(size, attributes, pri, base, name)
D0                D0    D1          D2   A0    A1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;with the purpose of adding the given memory &lt;code&gt;size&lt;/code&gt;, starting from the &lt;code&gt;base&lt;/code&gt; address, to the system pool. The memory &lt;code&gt;attributes&lt;/code&gt; will be store in the memory block and the priority (&lt;code&gt;pri&lt;/code&gt;) will be used to find the insertion point. The name is also added to the memory node to identify it.&lt;/p&gt;&lt;p&gt;We can split the memory addition in two different parts. &lt;code&gt;AddMemList&lt;/code&gt; will create a node that contain the parameters of the memory region, then will call &lt;code&gt;Enqueue&lt;/code&gt; to add it to the &lt;code&gt;MemList&lt;/code&gt; linked list. When Exec bootstraps the system the memory list is empty, but these functions must work in a generic case. Actually when the system has a memory expansion (fast memory), this is the first that is added to the list, but it's immediately followed by the chip memory.&lt;/p&gt;&lt;p&gt;To help you to follow what happens in the function, this is a depiction of the memory area that we want to add to the system pool at the end of &lt;code&gt;AddMemList&lt;/code&gt;, just before the call to &lt;code&gt;Enqueue&lt;/code&gt;. The area contains a header made of three structures, &lt;code&gt;LN&lt;/code&gt; (linked list node), &lt;code&gt;MH&lt;/code&gt; (memory header), and &lt;code&gt;MC&lt;/code&gt; (memory chunk)&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   SIZE +---------------+
        | Free memory   |
        +---------------+
        | ...           |
        +---------------+
        | Free memory   |
   0x2c +---------------+ &amp;lt;-+
        | MC_SIZE       |   |
   0x28 +---------------+   |
        | MC_BYTES      |   | MC
   0x24 +---------------+   |
        | MC_NEXT       |   |
   0x20 +---------------+ &amp;lt;-+
        | MH_FREE       |   |
   0x1c +---------------+   |
        | MH_UPPER      |   |
   0x18 +---------------+   |
        | MH_LOWER      |   | MH
   0x14 +---------------+   |
        | MH_FIRST      |   |
   0x10 +---------------+   |
        | MH_ATTRIBUTES |   |
    0xe +---------------+ &amp;lt;-+
        | LN_NAME       |   |
    0xa +---------------+   |
        | LN_PRI        |   |
    0x9 +---------------+   |
        | LN_TYPE       |   | LN
    0x8 +---------------+   |
        | LN_PRED       |   |
    0x4 +---------------+   |
        | LN_SUCC       |   |
    0x0 +---------------+ &amp;lt;-+
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;It is interesting to note that, since we are managing the system memory, we cannot store information about it other than in the memory itself. The presence of management structures, then, is reducing the amount of free memory. This has to taken into account when designing a memory management system, but will not be considered in this article.&lt;/p&gt;&lt;p&gt;When we create the structure shown in figure, we need to ensure that the actual free memory is a multiple of a long word (8 bytes), as this is generally desirable. The memory space we are dealing with starts from 0 in the picture, but can actually be anywhere in the system memory, so it is not guaranteed that either the beginning or the end of the free memory space are aligned with long words.&lt;/p&gt;&lt;p&gt;The code of &lt;code&gt;AddMemList&lt;/code&gt; performs the alignment in two steps. First it aligns the address of &lt;code&gt;MC&lt;/code&gt; to the upper nearest long word (multiple of 8), then aligns the total size to the lower nearest long word. For example, if the starting point was 0 and the total size 64 bytes, we would leave all the values untouched:&lt;code&gt;LN_SUCC&lt;/code&gt; at &lt;code&gt;0x0&lt;/code&gt;, &lt;code&gt;MC_NEXT&lt;/code&gt; at &lt;code&gt;0x20&lt;/code&gt;, and the total size of the chunk (structure 'MC' + free memory) would be 32 bytes.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   0x40 +---------------+ &amp;lt;-+
        | Free memory   |   |
        +---------------+   | 32 bytes
        | MC            |   |
   0x20 +---------------+ &amp;lt;-+
        | MH            |   |
        +---------------+   | 32 bytes
        | LN            |   |
    0x0 +---------------+ &amp;lt;-+
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;If the starting point was 1 and the total size 65 bytes, however, the result would be: &lt;code&gt;LN_SUCC&lt;/code&gt; at &lt;code&gt;0x1&lt;/code&gt;, &lt;code&gt;MC_NEXT&lt;/code&gt; at &lt;code&gt;0x28&lt;/code&gt; (upper long word), and the total size of the memory would be 56 bytes (65-7 gives 58, rounded down to a multiple of 8), which means a chunk of 24 bytes&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   0x42 +---------------+ &amp;lt;-+
        | Ignored       |   | 2 bytes
   0x40 +---------------+ &amp;lt;-+
        | Free memory   |   |
        +---------------+   | 24 bytes
        | MC            |   |
   0x28 +---------------+ &amp;lt;-+
        | EMPTY         |   | 7 bytes
   0x21 +---------------+ &amp;lt;-+
        | MH            |   |
        +---------------+   | 32 bytes
        | LN            |   |
    0x1 +---------------+ &amp;lt;-+
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 id="addmemlist-internals"&gt;AddMemList internals&lt;a class="headerlink" href="#addmemlist-internals" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;According to the Exec vectors table, &lt;code&gt;AddMemList&lt;/code&gt; can be found at &lt;code&gt;00001a26&lt;/code&gt;, and ends at &lt;code&gt;00001a78&lt;/code&gt;. It is immediately followed by a padding word &lt;code&gt;0000&lt;/code&gt; and the vectors table itself&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001a26: 2149 000a                 move.l  a1,0xa(a0)
00001a2a: 43e8 0020                 lea     0x20(a0),a1
00001a2e: 117c 000a 0008            move.b  #0xa,0x8(a0)
00001a34: 1142 0009                 move.b  d2,0x9(a0)
00001a38: 3141 000e                 move.w  d1,0xe(a0)
00001a3c: 2209                      move.l  a1,d1
00001a3e: 5e81                      addq.l  #0x7,d1
00001a40: 0201 00f8                 andi.b  #-0x8,d1
00001a44: c389                      exg     d1,a1
00001a46: 9289                      sub.l   a1,d1
00001a48: d081                      add.l   d1,d0
00001a4a: 0200 00f8                 andi.b  #-0x8,d0
00001a4e: 0480 0000 0020            subi.l  #0x20,d0
00001a54: 2149 0010                 move.l  a1,0x10(a0)
00001a58: 2149 0014                 move.l  a1,0x14(a0)
00001a5c: 2209                      move.l  a1,d1
00001a5e: d280                      add.l   d0,d1
00001a60: 2141 0018                 move.l  d1,0x18(a0)
00001a64: 2140 001c                 move.l  d0,0x1c(a0)
00001a68: 2340 0004                 move.l  d0,0x4(a1)
00001a6c: 4291                      clr.l   (a1)
00001a6e: 2248                      movea.l a0,a1
00001a70: 41ee 0142                 lea     0x142(a6),a0
00001a74: 6100 fc48                 bsr.w   0x16be
00001a78: 4e75                      rts     
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Let's comment the function line by line. I will refer to the fields shown in the picture above by name, mentioning the offsets for clarity.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001a26: 2149 000a                 move.l  a1,0xa(a0)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This code stores the address of the memory area name in &lt;code&gt;LN_NAME&lt;/code&gt; (&lt;code&gt;0xa(a0)&lt;/code&gt;).&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001a2a: 43e8 0020                 lea     0x20(a0),a1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This loads the absolute address of the memory chunk (structure &lt;code&gt;MC&lt;/code&gt;). The purpose of this is to align the memory chunk to a long word later in the code.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001a2e: 117c 000a 0008            move.b  #0xa,0x8(a0)
00001a34: 1142 0009                 move.b  d2,0x9(a0)
00001a38: 3141 000e                 move.w  d1,0xe(a0)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This stores &lt;code&gt;0xa&lt;/code&gt; in the &lt;code&gt;LN_TYPE&lt;/code&gt; field (&lt;code&gt;0x8(a0)&lt;/code&gt;). This corresponds to &lt;code&gt;NT_MEMORY&lt;/code&gt; (see &lt;code&gt;include_i/exec/nodes.i&lt;/code&gt;). It then copies the list priority into the &lt;code&gt;LN_PRI&lt;/code&gt; field (&lt;code&gt;0x9(a0)&lt;/code&gt;), and the memory attributes in the &lt;code&gt;MH_ATTRIBUTES&lt;/code&gt; field (&lt;code&gt;0xe(a0)&lt;/code&gt;).&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001a3c: 2209                      move.l  a1,d1
00001a3e: 5e81                      addq.l  #0x7,d1
00001a40: 0201 00f8                 andi.b  #-0x8,d1
00001a4e: 0480 0000 0020            subi.l  #0x20,d0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;These three lines of code align the address of &lt;code&gt;MC&lt;/code&gt; (&lt;code&gt;a1&lt;/code&gt;) to a long word, adding 7 and removing the least significant 3 bits. Then the size of the headers (&lt;code&gt;0x20&lt;/code&gt;) is removed from the total size of the memory region that was passed as an argument.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001a54: 2149 0010                 move.l  a1,0x10(a0)
00001a58: 2149 0014                 move.l  a1,0x14(a0)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Store the first free memory location (&lt;code&gt;a1&lt;/code&gt;) in &lt;code&gt;MH_FIRST&lt;/code&gt; (&lt;code&gt;0x10(a0)&lt;/code&gt;) and in &lt;code&gt;MH_LOWER&lt;/code&gt; (&lt;code&gt;0x14(a0)&lt;/code&gt;).&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001a5c: 2209                      move.l  a1,d1
00001a5e: d280                      add.l   d0,d1
00001a60: 2141 0018                 move.l  d1,0x18(a0)
00001a64: 2140 001c                 move.l  d0,0x1c(a0)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The size of the free memory is then added to the first free address and stored in &lt;code&gt;MH_UPPER&lt;/code&gt; (&lt;code&gt;0x18(a0)&lt;/code&gt;). The size of the free memory is stored in &lt;code&gt;MH_FREE&lt;/code&gt; (&lt;code&gt;0x1c(a0)&lt;/code&gt;).&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001a68: 2340 0004                 move.l  d0,0x4(a1)
00001a6c: 4291                      clr.l   (a1)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This code creates the memory chunk in the free memory area. The size of the chunk is stored in the &lt;code&gt;MC_BYTES&lt;/code&gt; field (&lt;code&gt;0x4(a1)&lt;/code&gt;), and the &lt;code&gt;MC_NEXT&lt;/code&gt; field is cleared.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001a6e: 2248                      movea.l a0,a1
00001a70: 41ee 0142                 lea     0x142(a6),a0
00001a74: 6100 fc48                 bsr.w   0x16be
00001a78: 4e75                      rts     
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The rest of the code prepares the call to the protected version of &lt;code&gt;Enqueue&lt;/code&gt;, copying the address of the node in &lt;code&gt;a1&lt;/code&gt; , the absolute address of &lt;code&gt;MemList&lt;/code&gt; in &lt;code&gt;a0&lt;/code&gt;, and branching to the subroutine. When &lt;code&gt;Enqueue&lt;/code&gt; returns, &lt;code&gt;AddMemList&lt;/code&gt; terminates and returns as well.&lt;/p&gt;&lt;h2 id="resources"&gt;Resources&lt;a class="headerlink" href="#resources" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Motorola M68000 Family Programmer's Reference Manual - &lt;a href="https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf"&gt;https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Amiga System Programmers Guide, Abacus - &lt;a href="https://archive.org/details/Amiga_System_Programmers_Guide_1988_Abacus"&gt;https://archive.org/details/Amiga_System_Programmers_Guide_1988_Abacus&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/blog_source/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Retro"></category><category term="assembly"></category><category term="amiga"></category><category term="retroprogramming"></category></entry><entry><title>Exploring the Amiga - Part 6</title><link href="https://www.thedigitalcatonline.com/blog/2018/06/25/exploring-the-amiga-6/" rel="alternate"></link><published>2018-06-25T13:00:00+01:00</published><updated>2021-02-26T08:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2018-06-25:/blog/2018/06/25/exploring-the-amiga-6/</id><summary type="html">&lt;p&gt;A review of the functions that perform memory management in Kickstart 1.3 &lt;/p&gt;</summary><content type="html">&lt;h2 id="memory-initialisation"&gt;Memory initialisation&lt;a class="headerlink" href="#memory-initialisation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The Amiga has two types of memory. The first one is found on-board and it is traditionally referred to as "Chip Memory". This name comes from the fact that both the CPU and the custom chips have access to it, which also means that all this components have to share the access. This slows down the CPU when the custom chips are using the memory. While they can use DMA to access it without blocking the CPU, the memory cannot be accessed by multiple components at the same time.&lt;/p&gt;&lt;p&gt;The second type of memory is called "Fast Memory" because the CPU has exclusive access to it, thus providing better performances. It is also referred to as "expansion memory" since it comes with expansion boards.&lt;/p&gt;&lt;p&gt;At a certain point during boot time Kickstart figures out the types of memory installed in the Amiga machine and puts the expansion memory size in &lt;code&gt;a4&lt;/code&gt;. If this register contains a non-zero value, Kickstart knows that an expansion board has been installed and configures the memory accordingly.&lt;/p&gt;&lt;p&gt;The memory initialisation code is the following&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00000380: 200c                      move.l  a4,d0
00000382: 6724                      beq.b   0x3a8
00000384: 41ee 024c                 lea     0x24c(a6),a0
00000388: 43fa ffa8                 lea     0x332(pc),a1
0000038c: 7400                      moveq   #0,d2
0000038e: 323c 0005                 move.w  #0x5,d1
00000392: 200c                      move.l  a4,d0
00000394: 9088                      sub.l   a0,d0
00000396: 0480 0000 1800            subi.l  #0x1800,d0
0000039c: 6100 1688                 bsr.w   0x1a26
000003a0: 41f8 0400                 lea     0x400.w,a0
000003a4: 7000                      moveq   #0,d0
000003a6: 600a                      bra.b   0x3b2
000003a8: 41ee 024c                 lea     0x24c(a6),a0
000003ac: 203c ffff e800            move.l  #-0x1800,d0
000003b2: 323c 0003                 move.w  #0x3,d1
000003b6: 2448                      movea.l a0,a2
000003b8: 43fa ff6c                 lea     0x326(pc),a1
000003bc: 74f6                      moveq   #-0xa,d2
000003be: d08b                      add.l   a3,d0
000003c0: 9088                      sub.l   a0,d0
000003c2: 6100 1662                 bsr.w   0x1a26
000003c6: 224e                      movea.l a6,a1
000003c8: 6100 107e                 bsr.w   0x1448
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;As I did in the previous post I will split the code in parts and replace some addresses with labels to try and make the routine more understandable&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Check_expansion:
00000380: 200c                      move.l  a4,d0
00000382: 6724                      beq.b   Only_chip

Add_expansion:
00000384: 41ee 024c                 lea     0x24c(a6),a0
00000388: 43fa ffa8                 lea     0x332(pc),a1
0000038c: 7400                      moveq   #0,d2
0000038e: 323c 0005                 move.w  #0x5,d1
00000392: 200c                      move.l  a4,d0
00000394: 9088                      sub.l   a0,d0
00000396: 0480 0000 1800            subi.l  #0x1800,d0
0000039c: 6100 1688                 bsr.w   0x1a26
000003a0: 41f8 0400                 lea     0x400.w,a0
000003a4: 7000                      moveq   #0,d0
000003a6: 600a                      bra.b   Add_chip

Only_chip:
000003a8: 41ee 024c                 lea     0x24c(a6),a0
000003ac: 203c ffff e800            move.l  #-0x1800,d0

Add_chip:
000003b2: 323c 0003                 move.w  #0x3,d1
000003b6: 2448                      movea.l a0,a2
000003b8: 43fa ff6c                 lea     0x326(pc),a1
000003bc: 74f6                      moveq   #-0xa,d2
000003be: d08b                      add.l   a3,d0
000003c0: 9088                      sub.l   a0,d0
000003c2: 6100 1662                 bsr.w   0x1a26
000003c6: 224e                      movea.l a6,a1
000003c8: 6100 107e                 bsr.w   0x1448
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The two addresses &lt;code&gt;0x326&lt;/code&gt; and &lt;code&gt;0x332&lt;/code&gt; mentioned in the code contain the two zero-terminated strings &lt;code&gt;Chip Memory&lt;/code&gt; and &lt;code&gt;Fast Memory&lt;/code&gt;&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;; ################################################################
; &amp;#39;Chip Memory&amp;#39; string

00000326: 43 ; C
00000327: 68 ; h
00000328: 69 ; i
00000329: 70 ; p
0000032a: 20 ; SP
0000032b: 4d ; M
0000032c: 65 ; e
0000032d: 6d ; m
0000032e: 6f ; o
0000032f: 72 ; r
00000330: 79 ; y
00000331: 00 ; NUL

; ################################################################
; &amp;#39;Fast Memory&amp;#39; string

00000332: 46 ; F
00000333: 61 ; a
00000334: 73 ; s
00000335: 74 ; t
00000336: 20 ; SP
00000337: 4d ; M 
00000338: 65 ; e
00000339: 6d ; m
0000033a: 6f ; o
0000033b: 72 ; r
0000033c: 79 ; y
0000033d: 00 ; NUL
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Let's analyse the code line by line.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Check_expansion:
00000380: 200c                      move.l  a4,d0
00000382: 6724                      beq.b   Only_chip
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The first thing that Kickstart does is to check if &lt;code&gt;a4&lt;/code&gt; contains a non-zero value, which signals that we have a memory expansion board available. If &lt;code&gt;a4&lt;/code&gt; is zero the code jumps to the part that initialises chip memory only.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Add_expansion:
00000384: 41ee 024c                 lea     0x24c(a6),a0
00000388: 43fa ffa8                 lea     0x332(pc),a1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The code then loads two effective addresses. The first one is the first free memory location (&lt;code&gt;0x24c&lt;/code&gt;) and the second one is the string &lt;code&gt;Fast Memory&lt;/code&gt;. The reason behind the address &lt;code&gt;0x24c&lt;/code&gt; is explained in a later section in detail.&lt;/p&gt;&lt;p&gt;The purpose of the code is to call the &lt;code&gt;AddMemList&lt;/code&gt; routine, which adds the memory to the system free memory pool. It has the following prototype&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;size = AddMemList(size, attributes, pri, base, name)
D0                D0    D1          D2   A0    A1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;size&lt;/code&gt; is the size of the memory (bytes), &lt;code&gt;attributes&lt;/code&gt; contains flags that identify memory attributes, &lt;code&gt;pri&lt;/code&gt; is the priority of the memory, &lt;code&gt;base&lt;/code&gt; is the base address of the new area and &lt;code&gt;name&lt;/code&gt; is a name for this list.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0000038c: 7400                      moveq   #0,d2
0000038e: 323c 0005                 move.w  #0x5,d1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The code then prepares the registers for the &lt;code&gt;AddMemList&lt;/code&gt; call. It gives this memory priority &lt;code&gt;0&lt;/code&gt; and sets the &lt;code&gt;attributes&lt;/code&gt; flags to &lt;code&gt;0x5&lt;/code&gt;, which is &lt;code&gt;101&lt;/code&gt;, or &lt;code&gt;PUBLIC&lt;/code&gt; and &lt;code&gt;FAST&lt;/code&gt; (see &lt;code&gt;include_i/exec/memory.i&lt;/code&gt;).&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00000392: 200c                      move.l  a4,d0
00000394: 9088                      sub.l   a0,d0
00000396: 0480 0000 1800            subi.l  #0x1800,d0
0000039c: 6100 1688                 bsr.w   0x1a26
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The expansion memory base address is copied in &lt;code&gt;d0&lt;/code&gt; (this is actually an unneeded repetition of what the code did 6 lines before, I think). It then subtracts the address of the first free location (because if this is not 0 it means that something is already stored in memory) and the size of the stack, that was initialised previously by Kickstart to 6 KBytes (hardcoded). After that the code jumps to &lt;code&gt;AddMemList&lt;/code&gt; (&lt;code&gt;0x1a26&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;When the routine returns the code begins the initialisation of the chip memory. The chip memory has to be initialised in two different ways depending on the presence of the expansion memory, as the latter is preferably used by the CPU.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000003a0: 41f8 0400                 lea     0x400.w,a0
000003a4: 7000                      moveq   #0,d0
000003a6: 600a                      bra.b   Add_chip

Only_chip:
000003a8: 41ee 024c                 lea     0x24c(a6),a0
000003ac: 203c ffff e800            move.l  #-0x1800,d0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;If the initial test on the presence of the expansion memory fails the code jumps directly to &lt;code&gt;0x03a8&lt;/code&gt;. If the expansion memory has already been initialised, instead, the CPU executes the code at &lt;code&gt;0x03a0&lt;/code&gt; and then jumps to &lt;code&gt;0x03b2&lt;/code&gt; (Renamed &lt;code&gt;Add_chip&lt;/code&gt; here).&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000003a0: 41f8 0400                 lea     0x400.w,a0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;So if there is expansion memory, Exec will be loaded there, which means that both it and the system stack are not in the chip memory. We can then add the whole space above &lt;code&gt;0x400&lt;/code&gt; (more on this number in a later section)&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000003a4: 7000                      moveq   #0,d0
000003a6: 600a                      bra.b   Add_chip
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Since the stack has already been created in fast memory we can store a 0 in &lt;code&gt;d0&lt;/code&gt; and jump to the code that adds the memory to the system lists&lt;/p&gt;&lt;p&gt;If the expansion is not present, instead, Exec is installed in the chip memory, so we compute the base like we did for the fast memory.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Only_chip:
000003a8: 41ee 024c                 lea     0x24c(a6),a0
000003ac: 203c ffff e800            move.l  #-0x1800,d0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Here we load the effective address of the first free location, &lt;code&gt;0x24c&lt;/code&gt; bytes after the ExecBase address, and we specify the size of the memory as 6 Kbytes less than the maximum, to keep some space for the system stack. The size is negative as later the memory size will be added to the register.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Add_chip:
000003b2: 323c 0003                 move.w  #0x3,d1
000003b6: 2448                      movea.l a0,a2
000003b8: 43fa ff6c                 lea     0x326(pc),a1
000003bc: 74f6                      moveq   #-0xa,d2
000003be: d08b                      add.l   a3,d0
000003c0: 9088                      sub.l   a0,d0
000003c2: 6100 1662                 bsr.w   0x1a26
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;After this we repeat the same procedure that was described for the fast memory. The attributes are now &lt;code&gt;CHIP&lt;/code&gt; and &lt;code&gt;PUBLIC&lt;/code&gt; (&lt;code&gt;0x3&lt;/code&gt;), the string at &lt;code&gt;0x326&lt;/code&gt; is &lt;code&gt;Chip Memory&lt;/code&gt;, and the priority is -10 (&lt;code&gt;-0xa&lt;/code&gt;). The &lt;code&gt;a3&lt;/code&gt; register already contains the end address of the chip memory, so we add it to &lt;code&gt;d0&lt;/code&gt; and then subtract the first free location computed before to get the size of the memory. As happened before, the routine calls &lt;code&gt;AddMemList&lt;/code&gt; at &lt;code&gt;0x1a26&lt;/code&gt;.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000003c6: 224e                      movea.l a6,a1
000003c8: 6100 107e                 bsr.w   0x1448
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The last action of this part of the code is to call &lt;code&gt;AddLibrary&lt;/code&gt; at &lt;code&gt;0x1448&lt;/code&gt;. The only parameter the routine requires is the base address of the library in &lt;code&gt;a1&lt;/code&gt;, which is why the code copies &lt;code&gt;a6&lt;/code&gt; there.&lt;/p&gt;&lt;h2 id="the-magic-number-0x24c"&gt;The "magic number" `0x24c`&lt;a class="headerlink" href="#the-magic-number-0x24c" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When we discussed the way the memory is initialised we discovered a "magic number" that Kickstart uses to find the first free location in memory&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00000384: 41ee 024c                 lea     0x24c(a6),a0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The first free location, according to this code is &lt;code&gt;0x24c&lt;/code&gt; (588) bytes after the Exec base address. The reason behind this number is simple. When the Exec library is installed its structures use exactly 588 bytes, thus that is the address of the first free space in memory.&lt;/p&gt;&lt;p&gt;It's easy to calculate this number. Here you find the annotated version of the &lt;code&gt;ExecBase&lt;/code&gt; structure that I already used in the previous instalment.&lt;/p&gt;&lt;p&gt;The structure is described in the &lt;code&gt;include_i/exec/execbase.i&lt;/code&gt; include file, and I added the displacement in bytes of each field. The first column is the displacement in the &lt;code&gt;ExecBase&lt;/code&gt; structure, while the second starts from &lt;code&gt;0x22&lt;/code&gt;. The latter comes from the fact that the structure follows an &lt;code&gt;LN&lt;/code&gt; structure and a &lt;code&gt;LIB&lt;/code&gt; structure, described in the fourth instalment of this series.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0000 0022    UWORD   SoftVer
0002 0024    WORD    LowMemChkSum
0004 0026    ULONG   ChkBase
0008 002a    APTR    ColdCapture
000c 002e    APTR    CoolCapture
0010 0032    APTR    WarmCapture
0014 0036    APTR    SysStkUpper
0018 003a    APTR    SysStkLower
001c 003e    ULONG   MaxLocMem
0020 0042    APTR    DebugEntry
0024 0046    APTR    DebugData
0028 004a    APTR    AlertData
002c 004e    APTR    MaxExtMem

0030 0052    WORD    ChkSum


******* Interrupt Related ********************************************

    LABEL   IntVects
0032 0054    STRUCT  IVTBE,IV_SIZE
003e 0060    STRUCT  IVDSKBLK,IV_SIZE
004a 006c    STRUCT  IVSOFTINT,IV_SIZE
0056 0078    STRUCT  IVPORTS,IV_SIZE
0062 0084    STRUCT  IVCOPER,IV_SIZE
006e 0090    STRUCT  IVVERTB,IV_SIZE
007a 009c    STRUCT  IVBLIT,IV_SIZE
0086 00a8    STRUCT  IVAUD0,IV_SIZE
0092 00b4    STRUCT  IVAUD1,IV_SIZE
009e 00c0    STRUCT  IVAUD2,IV_SIZE
00aa 00cc    STRUCT  IVAUD3,IV_SIZE
00b6 00d8    STRUCT  IVRBF,IV_SIZE
00c2 00e4    STRUCT  IVDSKSYNC,IV_SIZE
00ce 00f0    STRUCT  IVEXTER,IV_SIZE
00da 00fc    STRUCT  IVINTEN,IV_SIZE
00e6 0108    STRUCT  IVNMI,IV_SIZE


******* Dynamic System Variables *************************************

00f2 0114    APTR    ThisTask

00f6 0118    ULONG   IdleCount
00fa 011c    ULONG   DispCount
00fe 0120    UWORD   Quantum
0100 0122    UWORD   Elapsed
0102 0124    UWORD   SysFlags
0104 0126    BYTE    IDNestCnt
0105 0127    BYTE    TDNestCnt

0106 0128    UWORD   AttnFlags

0108 012a    UWORD   AttnResched
010a 012c    APTR    ResModules
010e 0130    APTR    TaskTrapCode
0112 0134    APTR    TaskExceptCode
0116 0138    APTR    TaskExitCode
011a 013c    ULONG   TaskSigAlloc
011e 0140    UWORD   TaskTrapAlloc


******* System List Headers (private!) ********************************

0120 0142    STRUCT  MemList,LH_SIZE
012e 0150    STRUCT  ResourceList,LH_SIZE
013c 015e    STRUCT  DeviceList,LH_SIZE
014a 016c    STRUCT  IntrList,LH_SIZE
0158 017a    STRUCT  LibList,LH_SIZE
0166 0188    STRUCT  PortList,LH_SIZE
0174 0196    STRUCT  TaskReady,LH_SIZE
0182 01a4    STRUCT  TaskWait,LH_SIZE
0190 01b2    STRUCT  SoftInts,SH_SIZE*5

01e0 0202    STRUCT  LastAlert,4*4

01f0 0212    UBYTE   VBlankFrequency
01f1 0213    UBYTE   PowerSupplyFrequency

01f2 0214    STRUCT  SemaphoreList,LH_SIZE

0200 0222    APTR    KickMemPtr
0204 0226    APTR    KickTagPtr
0208 022a    APTR    KickCheckSum

020c 022e    UBYTE   ExecBaseReserved[10];
0216 0238    UBYTE   ExecBaseNewReserved[20];
022a 024c    LABEL   SYSBASESIZE
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The include file that I found in the Amiga Developer CD has a slightly different version of this structure that contains fields from higher versions of Exec. This structure can be found in the Amiga System Programmer's Guide, page 308. You can easily find the definitions of values like &lt;code&gt;SH_SIZE&lt;/code&gt; in the include files contained in the &lt;code&gt;include_i/exec/&lt;/code&gt; directory.&lt;/p&gt;&lt;p&gt;As you can see the final address is &lt;code&gt;0x24c&lt;/code&gt;, which is exactly where the free memory begins (remember that &lt;code&gt;LABEL&lt;/code&gt; is a macro and not a field, so it doesn't use space).&lt;/p&gt;&lt;h2 id="the-magic-numbers-0x676-and-0x400"&gt;The "magic numbers" `0x676` and `0x400`&lt;a class="headerlink" href="#the-magic-numbers-0x676-and-0x400" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The Motorola 68000 architecture forces to reserve the first 1024 bytes (&lt;code&gt;0x400&lt;/code&gt;) for the exception vectors. The table of these vectors can be found in the Programmer's Reference Manual, page B-2, and this is the source for the magic number used when adding the chip memory to the system lists in case an expansion memory is installed.&lt;/p&gt;&lt;p&gt;The Exec base address, however, is not &lt;code&gt;0x400&lt;/code&gt; but &lt;code&gt;0x676&lt;/code&gt;. As we already know the library is preceded by the jump table, and since Exec exports 105 functions we use &lt;code&gt;105*6 = 630&lt;/code&gt; bytes for the jump vectors. Adding these 630 bytes to the first 1024 reserved for the exception vectors gives 1654 (&lt;code&gt;0x676&lt;/code&gt;) as the base address of the library.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        +---------------------------------------+
        | First free address                    |
   2242 +---------------------------------------+ 0x8c2 &amp;lt;-+
        | ExecBase structure                    |         |
   1688 +---------------------------------------+ 0x698   |
        | LIB structure                         |         | Exec base
   1668 +---------------------------------------+ 0x684   | structure
        | LN structure                          |         |
   1654 +---------------------------------------+ 0x676 &amp;lt;-+
        | Jump vector #105                      |         |
        +---------------------------------------+         |
        | [...]                                 |         |
        +---------------------------------------+         | Exec jump
        | Jump vector #2                        |         | vector table
   1030 +---------------------------------------+ 0x406   |
        | Jump vector #1                        |         |
   1024 +---------------------------------------+ 0x400 &amp;lt;-+
        | End of reserved space                 |         |
        +---------------------------------------+         |
        | [...]                                 |         |
     12 +---------------------------------------+ 0xc     | 1 Kilobyte
        | Vector #2                             |         | reserved by
      8 +---------------------------------------+ 0x8     | the M68k
        | Reset Initial Program Counter         |         | architecture
      4 +---------------------------------------+ 0x4     |
        | Reset Initial Interrupt Stack Pointer |         |
      0 +---------------------------------------+ 0x0   &amp;lt;-+
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 id="whats-next"&gt;What's next&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It's time to show the complete Exec vector table, as we are going to use and analyse all the functions defined there. I will then discuss the structure of the memory list header and its relationship with linked lists. Last I will dissect the code of &lt;code&gt;AddMemList&lt;/code&gt; and thus show in detail how the chip and expansion memory areas are added to to free memory pool.&lt;/p&gt;&lt;h2 id="resources"&gt;Resources&lt;a class="headerlink" href="#resources" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Microprocessor-based system design by Ricardo Gutierrez-Osuna (&lt;a href="http://courses.cs.tamu.edu/rgutier/ceg411_f01/"&gt;slides&lt;/a&gt;), in particular &lt;a href="http://courses.cs.tamu.edu/rgutier/ceg411_f01/l9.pdf"&gt;Lesson 9 - Exception processing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Motorola M68000 Family Programmer's Reference Manual - &lt;a href="https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf"&gt;https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Amiga System Programmers Guide, Abacus - &lt;a href="https://archive.org/details/Amiga_System_Programmers_Guide_1988_Abacus"&gt;https://archive.org/details/Amiga_System_Programmers_Guide_1988_Abacus&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/blog_source/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Retro"></category><category term="assembly"></category><category term="amiga"></category><category term="retroprogramming"></category></entry><entry><title>Exploring the Amiga - Part 5</title><link href="https://www.thedigitalcatonline.com/blog/2018/06/25/exploring-the-amiga-5/" rel="alternate"></link><published>2018-06-25T12:00:00+01:00</published><updated>2021-02-26T08:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2018-06-25:/blog/2018/06/25/exploring-the-amiga-5/</id><summary type="html">&lt;p&gt;List management in Kickstart 1.3&lt;/p&gt;</summary><content type="html">&lt;p&gt;Memory management is always one of the most rich and complex parts of an architecture, mainly because the available amount of memory is always less than what you would like to have. &lt;a href="https://users.ece.cmu.edu/~koopman/titan/rules.html"&gt;Always&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;It is also an interesting topic because memory is generally managed by both the hardware and the software. The microprocessor may provide a memory management unit (MMU) that enforces a specific schema and the software has to implement its own algorithms on top of that.&lt;/p&gt;&lt;p&gt;The Amiga originally run on a Motorola 68k, which doesn't provide any memory management in hardware. This means that there is no way for the processor to block attempts to read memory by a process, a feature that wasn't present on the first Intel x86 processors as well. Intel "solved" the issue with the introduction of the protected mode in the 386 family (even though an initial version was already present on the 286 processors). Motorola provided external MMUs for the 68010 and 68020, while the 68030 and later processor feature an on-chip MMU. &lt;/p&gt;&lt;p&gt;The Motorola 68k is a 32-bit processor, thus registers and the address bus have that size. The memory, however, is connected to only 24 of the 32 lines of the bus, which means that the total memory space addressable by the processor is a 24-bit space, that gives 16 Megabytes instead of the possible 4 Gigabytes. That amount of memory was however enough for the period when the Amiga was designed. Consider that the most successful model of Amiga, the Amiga 500, had 500 KBytes of memory, sometimes increased to 1 Megabyte through a memory expansion.&lt;/p&gt;&lt;p&gt;The lack of a memory scheme enforced by the processor means that at boot time the memory is just a flat area that can be addressed directly. As we saw in the previous instalments, Exec creates its own structure in memory, generating the library node and creating the library jump table. This happens in the bigger picture of the machine initialisation, and one of the tasks performed during this initialisation is the setup of the memory management structures.&lt;/p&gt;&lt;h2 id="the-exec-base-address"&gt;The Exec base address&lt;a class="headerlink" href="#the-exec-base-address" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Every Amiga programmer knows that address &lt;code&gt;0x4&lt;/code&gt; contains the Exec base address, and I showed in past instalments how this is used in conjunction with the jump table to call the library functions.&lt;/p&gt;&lt;p&gt;The reason why the Exec base address is stored there is however seldom mentioned. As a matter of fact that address is not just a random choice.&lt;/p&gt;&lt;p&gt;The Motorola 68000 family reserves the first Kilobyte of memory for exception vectors, that is code that will be executed when something wrong happens. "Wrong" here means bad at hardware level, from a divide by zero to a bus error. This is enforced by the Motorola 68k architecture and thus is a feature shared by other computers and consoles based on it.&lt;/p&gt;&lt;p&gt;The first two of these vectors are actually used when the processor is powering-up (or in general when it resets). And the vector number 1 (the second) at offset &lt;code&gt;0x4&lt;/code&gt; is the Reset Initial Program Counter.&lt;/p&gt;&lt;p&gt;After a reset the processor initialises the Program Counter with the address stored at &lt;code&gt;0x4&lt;/code&gt; in the memory. When the CPU is switched on, however, the Kickstart ROM is copied in memory, thus the addresses 0 and 4 (first two exception vectors) are the addresses listed in the ROM itself.&lt;/p&gt;&lt;p&gt;The very first 8 bytes of the Kickstart ROM are&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00000000: 1111
00000002: 4ef9 00fc 00d2            jmp     0xfc00d2.l
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;and you can clearly see that the long word at address &lt;code&gt;0x4&lt;/code&gt; is &lt;code&gt;00fc 00d2&lt;/code&gt;. This actually corresponds to the address where the initial code of the ROM is&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000000d2: 4ff9 0004 0000            lea     0x40000.l,sp
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;which sets the stack pointer, but I'll keep this analysis for a future post.&lt;/p&gt;&lt;p&gt;The address &lt;code&gt;0x4&lt;/code&gt; is then free to be used during the normal execution, since it is used only during a reset, but in that case whatever we wrote there (the Exec base address) is overwritten by the ROM code.&lt;/p&gt;&lt;h2 id="list-headers"&gt;List headers&lt;a class="headerlink" href="#list-headers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Exec manages memory and resources using &lt;a href="https://en.wikipedia.org/wiki/Linked_list"&gt;linked lists&lt;/a&gt;. As you know, to manage a linked list we need the address (pointer) of the head, of the tail, and also of the second-to-last element (the tail predecessor), to allow the tail to be detached and replaced. Actually it is evident that, given the convention that the last node is connected to the address 0, the only value we need is the address of the list head. The two additional addresses, however, can greatly simplify the code that manages the list and can greatly increase the performances, avoiding the need of a complete scan of the list to find the last element every time we want to add something to the end of the list.&lt;/p&gt;&lt;p&gt;The Exec library provides a nice structure to manage lists, &lt;code&gt;LH&lt;/code&gt;. The structure is defined in &lt;code&gt;include_i/exec/lists.i&lt;/code&gt;&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   STRUCTURE    LH,0
    APTR    LH_HEAD
    APTR    LH_TAIL
    APTR    LH_TAILPRED
    UBYTE   LH_TYPE
    UBYTE   LH_pad
    LABEL   LH_SIZE ;word aligned
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The only two fields that this structure adds compared to the previous description are &lt;code&gt;LH_TYPE&lt;/code&gt;, that unsurprisingly contains the type of the data contained in the list, and &lt;code&gt;LH_pad&lt;/code&gt; which is nothing but what the name suggests, a padding that allows the structure to be word aligned.&lt;/p&gt;&lt;p&gt;We need now to discover where Exec keeps the header for the memory list. Analysing the &lt;code&gt;ExecBase&lt;/code&gt; structure contained in &lt;code&gt;include_i/exec/execbase.i&lt;/code&gt; we find the following definitions&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;******* System List Headers (private!) ********************************

    STRUCT  MemList,LH_SIZE
    STRUCT  ResourceList,LH_SIZE
    STRUCT  DeviceList,LH_SIZE
    STRUCT  IntrList,LH_SIZE
    STRUCT  LibList,LH_SIZE
    STRUCT  PortList,LH_SIZE
    STRUCT  TaskReady,LH_SIZE
    STRUCT  TaskWait,LH_SIZE
    STRUCT  SoftInts,SH_SIZE*5
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;which is exactly what we wanted. When Exec installs itself in the first part of the memory it will also initialise these headers to keep track of the corresponding resources.&lt;/p&gt;&lt;p&gt;It is interesting to note, however, that the ExecBase structure described in the include files is not used directly, but is more a description of what the code is going to create. This is a bit different from what higher level languages like C use to do. In C you declare a structure, you reserve memory for it, and then access its fields. In Assembly, ultimately, there is no such a concept as a structure and a field. We have only a (flat) memory and addresses.&lt;/p&gt;&lt;p&gt;Since ExecBase is a description of the structure of Exec once it will be installed in memory it is interesting to run through its fields and annotate the relative address of each of them.&lt;/p&gt;&lt;p&gt;I took the code contained in &lt;code&gt;include_i/exec/execbase.i&lt;/code&gt; and I computed the address of each field. The first column contains the relative address inside the structure (thus starting from &lt;code&gt;0x0&lt;/code&gt;), while the second column contains the address relative to the Exec base address. As shown in the fourth post the &lt;code&gt;LN&lt;/code&gt; and &lt;code&gt;LIB&lt;/code&gt; structures fill the first 34 bytes, which is why the following starting address is &lt;code&gt;0x22&lt;/code&gt;&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0000 0022    UWORD   SoftVer ; kickstart release number (obs.)
0002 0024    WORD    LowMemChkSum    ; checksum of 68000 trap vectors
0004 0026    ULONG   ChkBase ; system base pointer complement
0008 002a    APTR    ColdCapture ; coldstart soft capture vector
000c 002e    APTR    CoolCapture ; coolstart soft capture vector
0010 0032    APTR    WarmCapture ; warmstart soft capture vector
0014 0036    APTR    SysStkUpper ; system stack base   (upper bound)
0018 003a    APTR    SysStkLower ; top of system stack (lower bound)
001c 003e    ULONG   MaxLocMem   ; top of chip memory
0020 0042    APTR    DebugEntry  ; global debugger entry point
0024 0046    APTR    DebugData   ; global debugger data segment
0028 004a    APTR    AlertData   ; alert data segment
002c 004e    APTR    MaxExtMem   ; top of extended mem, or null if none

0030 0052    WORD    ChkSum      ; for all of the above (minus 2)


******* Interrupt Related ********************************************

    LABEL   IntVects
0032 0054    STRUCT  IVTBE,IV_SIZE
003e 0060    STRUCT  IVDSKBLK,IV_SIZE
004a 006c    STRUCT  IVSOFTINT,IV_SIZE
0056 0078    STRUCT  IVPORTS,IV_SIZE
0062 0084    STRUCT  IVCOPER,IV_SIZE
006e 0090    STRUCT  IVVERTB,IV_SIZE
007a 009c    STRUCT  IVBLIT,IV_SIZE
0086 00a8    STRUCT  IVAUD0,IV_SIZE
0092 00b4    STRUCT  IVAUD1,IV_SIZE
009e 00c0    STRUCT  IVAUD2,IV_SIZE
00aa 00cc    STRUCT  IVAUD3,IV_SIZE
00b6 00d8    STRUCT  IVRBF,IV_SIZE
00c2 00e4    STRUCT  IVDSKSYNC,IV_SIZE
00ce 00f0    STRUCT  IVEXTER,IV_SIZE
00da 00fc    STRUCT  IVINTEN,IV_SIZE
00e6 0108    STRUCT  IVNMI,IV_SIZE


******* Dynamic System Variables *************************************

00f2 0114    APTR    ThisTask    ; pointer to current task (readable)

00f6 0118    ULONG   IdleCount   ; idle counter
00fa 011c    ULONG   DispCount   ; dispatch counter
00fe 0120    UWORD   Quantum ; time slice quantum
0100 0122    UWORD   Elapsed ; current quantum ticks
0102 0124    UWORD   SysFlags    ; misc internal system flags
0104 0126    BYTE    IDNestCnt   ; interrupt disable nesting count
0105 0127    BYTE    TDNestCnt   ; task disable nesting count

0106 0128    UWORD   AttnFlags   ; special attention flags (readable)

0108 012a    UWORD   AttnResched ; rescheduling attention
010a 012c    APTR    ResModules  ; pointer to resident module array
010e 0130    APTR    TaskTrapCode    ; default task trap routine
0112 0134    APTR    TaskExceptCode  ; default task exception code
0116 0138    APTR    TaskExitCode    ; default task exit code
011a 013c    ULONG   TaskSigAlloc    ; preallocated signal mask
011e 0140    UWORD   TaskTrapAlloc   ; preallocated trap mask


******* System List Headers (private!) ********************************

0120 0142    STRUCT  MemList,LH_SIZE
012e 0150    STRUCT  ResourceList,LH_SIZE
013c 015e    STRUCT  DeviceList,LH_SIZE
014a 016c    STRUCT  IntrList,LH_SIZE
0158 017a    STRUCT  LibList,LH_SIZE
0166 0188    STRUCT  PortList,LH_SIZE
0174 0196    STRUCT  TaskReady,LH_SIZE
0182 01a4    STRUCT  TaskWait,LH_SIZE
0190 01b2    STRUCT  SoftInts,SH_SIZE*5

01e0 0202    STRUCT  LastAlert,4*4

01f0 0212    UBYTE   VBlankFrequency     ;(readable)
01f1 0213    UBYTE   PowerSupplyFrequency    ;(readable)

01f2 0214    STRUCT  SemaphoreList,LH_SIZE

0200 0222    APTR    KickMemPtr  ; ptr to queue of mem lists
0204 0226    APTR    KickTagPtr  ; ptr to rom tag queue
0208 022a    APTR    KickCheckSum    ; checksum for mem and tags

020c 022e    UBYTE ExecBaseReserved[10];
0216 0238    UBYTE ExecBaseNewReserved[20];
022a 024c    LABEL   SYSBASESIZE
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;According to this structure we expect to find the memory list header 322 bytes (&lt;code&gt;0x142&lt;/code&gt;) after the base address, which means that this number should be mentioned somewhere in the Kickstart code.&lt;/p&gt;&lt;p&gt;It is not surprise indeed that the function &lt;code&gt;AllocMem&lt;/code&gt; mentions it. This function is part of the Exec API that we explored in the third and fourth instalments. Following the same method described there I found the function at the address &lt;code&gt;0x17d0&lt;/code&gt; in the Kickstart code&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;; memoryBlock = AllocMem(byteSize, attributes)
; d0                     d0        d1

000017d0: 522e 0127                 addq.b  #0x1,0x127(a6)
000017d4: 48e7 3020                 movem.l d2-d3/a2,-(sp)
000017d8: 2600                      move.l  d0,d3
000017da: 2401                      move.l  d1,d2
000017dc: 45ee 0142                 lea     0x142(a6),a2
000017e0: 2452                      movea.l (a2),a2
; ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;and in this initial part of the function we can clearly see the code that loads the effective address of &lt;code&gt;0x142(a6)&lt;/code&gt;. Remember that &lt;code&gt;a6&lt;/code&gt; is always supposed to contain the Exec base address.&lt;/p&gt;&lt;p&gt;The displacement &lt;code&gt;0x142&lt;/code&gt; is also mentioned in a table towards the beginning of the code, and this is the part we are really interested in at the moment&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;; Initialise list headers

000002b0: 43fa 0020                 lea     0x2d2(pc),a1
000002b4: 3019                      move.w  (a1)+,d0
000002b6: 6700 0086                 beq.w   0x33e
000002ba: 41f6 0000                 lea     (0,a6,d0.w),a0
000002be: 2088                      move.l  a0,(a0)
000002c0: 5890                      addq.l  #0x4,(a0)
000002c2: 42a8 0004                 clr.l   0x4(a0)
000002c6: 2148 0008                 move.l  a0,0x8(a0)
000002ca: 3019                      move.w  (a1)+,d0
000002cc: 1140 000c                 move.b  d0,0xc(a0)
000002d0: 60e2                      bra.b   0x2b4

; List headers

000002d2: 0142 000a
000002d6: 0150 0008
000002da: 015e 0003
000002de: 017a 0009
000002e2: 0188 0004
000002e6: 0196 0001
000002ea: 01a4 0001
000002ee: 016c 0002
000002f2: 01b2 000b
000002f6: 01c2 000b
000002fa: 01d2 000b
000002fe: 01e2 000b
00000302: 01f2 000b
00000306: 0214 000f
0000030a: 0000
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;As you can see I formatted the code to show that the values after &lt;code&gt;02d2&lt;/code&gt; are data and not code. The disassembler will obviously show you some instructions but they are just misinterpretations of the binary data. AS it is usual in the Kickstart code, we have some procedure working on a set of data and the data is stored immediately after the code itself. The purpose of this procedure is that of creating the initial headers for the linked lists that Exec will use to manage the system resources.&lt;/p&gt;&lt;p&gt;This table is immediately followed by the table we found in the &lt;a href="https://www.thedigitalcatonline.com/blog/2018/06/08/exploring-the-amiga-3/"&gt;third post&lt;/a&gt; of this series, when we were looking at the values of the &lt;code&gt;LIB&lt;/code&gt; structure.&lt;/p&gt;&lt;p&gt;Let's comment line by line the code at &lt;code&gt;02b0&lt;/code&gt;&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;; Initialise list headers

000002b0: 43fa 0020                 lea     0x2d2(pc),a1
000002b4: 3019                      move.w  (a1)+,d0
000002b6: 6700 0086                 beq.w   0x33e
000002ba: 41f6 0000                 lea     (0,a6,d0.w),a0
000002be: 2088                      move.l  a0,(a0)
000002c0: 5890                      addq.l  #0x4,(a0)
000002c2: 42a8 0004                 clr.l   0x4(a0)
000002c6: 2148 0008                 move.l  a0,0x8(a0)
000002ca: 3019                      move.w  (a1)+,d0
000002cc: 1140 000c                 move.b  d0,0xc(a0)
000002d0: 60e2                      bra.b   0x2b4
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000002b0: 43fa 0020                 lea     0x2d2(pc),a1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;First of all the code loads the absolute address of &lt;code&gt;0x2d2(pc)&lt;/code&gt; in the &lt;code&gt;a1&lt;/code&gt; register. This is exactly the beginning of the table, as shown above.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000002b4: 3019                      move.w  (a1)+,d0
000002b6: 6700 0086                 beq.w   0x33e
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The code then loads the first value of the table (&lt;code&gt;0142&lt;/code&gt;) in &lt;code&gt;d0&lt;/code&gt; and increments &lt;code&gt;a1&lt;/code&gt;. This suggests that we are looking at a loop. The following instruction is indeed a comparison that jumps to &lt;code&gt;0x33e&lt;/code&gt; is the value is &lt;code&gt;0&lt;/code&gt;. You can easily see above that the table is terminated by a &lt;code&gt;0000&lt;/code&gt;.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000002ba: 41f6 0000                 lea     (0,a6,d0.w),a0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The register &lt;code&gt;a0&lt;/code&gt; is then loaded with the effective address of Exec + &lt;code&gt;d0&lt;/code&gt;. This means that we use the value we just read from the table as a pointer. For the first value, then, we are looking at &lt;code&gt;0x142&lt;/code&gt; bytes after the beginning of the Exec library, exactly where we expected to find the Memory List header.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000002be: 2088                      move.l  a0,(a0)
000002c0: 5890                      addq.l  #0x4,(a0)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;An empty linked list has the head pointing to the tail and the tail pointing to zero. To do this we set the content of that address &lt;code&gt;(a0)&lt;/code&gt; to the address itself (&lt;code&gt;a0&lt;/code&gt;), then we increment it by 4 making it point to the tail.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000002c2: 42a8 0004                 clr.l   0x4(a0)
000002c6: 2148 0008                 move.l  a0,0x8(a0)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The tail itself is then cleared and the tail predecessor is set to be the head.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000002ca: 3019                      move.w  (a1)+,d0
000002cc: 1140 000c                 move.b  d0,0xc(a0)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The code then fetches the next word from the table (&lt;code&gt;000a&lt;/code&gt;) and puts it into a field 12 bytes (&lt;code&gt;0xc&lt;/code&gt;) from the beginning of the structure, that is &lt;code&gt;LH_TYPE&lt;/code&gt;. The possible values of this byte can be found in &lt;code&gt;include_i/exec/nodes.i&lt;/code&gt;, where we find that the value &lt;code&gt;0xa&lt;/code&gt; corresponds to &lt;code&gt;NT_MEMORY&lt;/code&gt;.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;;------ Node Types for LN_TYPE

NT_UNKNOWN      EQU 0
NT_TASK         EQU 1   ; Exec task
NT_INTERRUPT    EQU 2
NT_DEVICE       EQU 3
NT_MSGPORT      EQU 4
NT_MESSAGE      EQU 5   ; Indicates message currently pending
NT_FREEMSG      EQU 6
NT_REPLYMSG     EQU 7   ; Message has been replied
NT_RESOURCE     EQU 8
NT_LIBRARY      EQU 9
NT_MEMORY       EQU 10
NT_SOFTINT      EQU 11  ; Internal flag used by SoftInts
NT_FONT         EQU 12
NT_PROCESS      EQU 13  ; AmigaDOS Process
NT_SEMAPHORE    EQU 14
NT_SIGNALSEM    EQU 15  ; signal semaphores
NT_BOOTNODE     EQU 16
NT_KICKMEM      EQU 17
NT_GRAPHICS     EQU 18
NT_DEATHMESSAGE EQU 19

NT_USER         EQU 254 ; User node types work down from here
NT_EXTENDED     EQU 255
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;There is only one instruction left&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000002d0: 60e2                      bra.b   0x2b4
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;which jumps back to the beginning of this short piece of code. The procedure then keeps looping on the whole table until it reaches the list terminator &lt;code&gt;0000&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The final content of the memory at &lt;code&gt;0142&lt;/code&gt; will be&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00000142: 0000 0146 ; LH_HEAD
00000146: 0000 0000 ; LH_TAIL
0000014a: 0000 0146 ; LH_TAILPRED
0000014d: 0a        ; LH_TYPE
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;And the same happens for the remaining 7 lists from &lt;code&gt;ResourceList&lt;/code&gt; to &lt;code&gt;TaskWait&lt;/code&gt;. After this the Exec lists are initialised.&lt;/p&gt;&lt;p&gt;According to the values of &lt;code&gt;LN_TYPE&lt;/code&gt; the list headers table is the following&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000002d2: 0142 000a ; MemList (NT_MEMORY)
000002d6: 0150 0008 ; ResourceList (NT_RESOURCE)
000002da: 015e 0003 ; DeviceList (NT_DEVICE)
000002de: 017a 0009 ; LibList (NT_LIBRARY)
000002e2: 0188 0004 ; PortList (NT_MSGPORT)
000002e6: 0196 0001 ; TaskReady (NT_TASK)
000002ea: 01a4 0001 ; TaskWait (NT_TASK)
000002ee: 016c 0002 ; IntrList (NT_INTERRUPT)
000002f2: 01b2 000b ; SoftInts[0] (NT_SOFTINT)
000002f6: 01c2 000b ; SoftInts[1] (NT_SOFTINT)
000002fa: 01d2 000b ; SoftInts[2] (NT_SOFTINT)
000002fe: 01e2 000b ; SoftInts[3] (NT_SOFTINT)
00000302: 01f2 000b ; SoftInts[4] (NT_SOFTINT)
00000306: 0214 000f ; SemaphoreList (NT_SIGNALSEM)
0000030a: 0000
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 id="whats-next"&gt;What's next&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The next instalment of the series will cover the initial part of the system memory initialisation, both the standard one and potential expansions, introducing &lt;code&gt;AddMemList&lt;/code&gt; for the first time. It will also discuss the origin of some important numbers used in the Kickstart code, &lt;code&gt;0x24c&lt;/code&gt;, &lt;code&gt;0x400&lt;/code&gt;, and &lt;code&gt;0x676&lt;/code&gt;.&lt;/p&gt;&lt;h2 id="resources"&gt;Resources&lt;a class="headerlink" href="#resources" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Microprocessor-based system design by Ricardo Gutierrez-Osuna (&lt;a href="http://courses.cs.tamu.edu/rgutier/ceg411_f01/"&gt;slides&lt;/a&gt;), in particular &lt;a href="http://courses.cs.tamu.edu/rgutier/ceg411_f01/l9.pdf"&gt;Lesson 9 - Exception processing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Motorola M68000 Family Programmer's Reference Manual - &lt;a href="https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf"&gt;https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/blog_source/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Retro"></category><category term="assembly"></category><category term="amiga"></category><category term="retroprogramming"></category></entry><entry><title>Exploring the Amiga - Part 4</title><link href="https://www.thedigitalcatonline.com/blog/2018/06/14/exploring-the-amiga-4/" rel="alternate"></link><published>2018-06-14T14:30:00+01:00</published><updated>2021-02-26T08:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2018-06-14:/blog/2018/06/14/exploring-the-amiga-4/</id><summary type="html">&lt;p&gt;The base functions of the Exec library and the MakeFunctions procedure&lt;/p&gt;</summary><content type="html">&lt;h2 id="the-exec-base-functions"&gt;The Exec base functions&lt;a class="headerlink" href="#the-exec-base-functions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We found the Kickstart 1.3 (Exec 34.2) vector table at address &lt;code&gt;0x1a7c&lt;/code&gt;, and the first 4 entries read&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001a7c: 08a0
00001a7e: 08a8
00001a80: 08ac
00001a82: 08ac
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;If we translate these relative values into absolute addresses, summing the address of the table itself, we discover the address of the 4 base functions that every Amiga library has to provide, namely &lt;code&gt;Open&lt;/code&gt;, &lt;code&gt;Close&lt;/code&gt;, &lt;code&gt;Expunge&lt;/code&gt;, and a reserved slot that should contain a function that returns 0.&lt;/p&gt;&lt;h3 id="open"&gt;Open&lt;/h3&gt;&lt;p&gt;The first value is &lt;code&gt;0x08a0&lt;/code&gt;, and if we sum this value to the address of the table itself we get &lt;code&gt;0x1a7c + 0x08a0 = 0x231c&lt;/code&gt;. At this address we will find the first function defined in the jump table, that is &lt;code&gt;Open&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The code is the following&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0000231c: 200e          move.l  a6,d0
0000231e: 526e 0020     addq.w  #0x1,0x20(a6)
00002322: 4e75          rts
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Open&lt;/code&gt; routine expects the address of the library to be in the &lt;code&gt;a6&lt;/code&gt; register, and returns the same value in &lt;code&gt;d0&lt;/code&gt;. It then adds 1 to the number contained 32 bytes (&lt;code&gt;0x20&lt;/code&gt;) after the address of the library itself and then returns. To find out what this number is we can go back again to the NDK and its include files.&lt;/p&gt;&lt;p&gt;From a previous investigation we know that, once the library has been installed in memory, there are two structures defined one after the other. The first is the &lt;code&gt;LN&lt;/code&gt; structure that represents a linked list node, and the second is the &lt;code&gt;LIB&lt;/code&gt; structure that represents the library.&lt;/p&gt;&lt;p&gt;We find the definition of &lt;code&gt;LN&lt;/code&gt; in &lt;code&gt;include_i/exec/nodes.i&lt;/code&gt;&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; STRUCTURE    LN,0    ; List Node
    APTR    LN_SUCC ; Pointer to next (successor)
    APTR    LN_PRED ; Pointer to previous (predecessor)
    UBYTE   LN_TYPE
    BYTE    LN_PRI  ; Priority, for sorting
    APTR    LN_NAME ; ID string, null terminated
    LABEL   LN_SIZE ; Note: word aligned
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;and the definition of &lt;code&gt;LIB&lt;/code&gt; in &lt;code&gt;include_i/exewc/libraries.i&lt;/code&gt;&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; STRUCTURE LIB,LN_SIZE
    UBYTE   LIB_FLAGS       ; see below
    UBYTE   LIB_pad         ; must be zero
    UWORD   LIB_NEGSIZE     ; number of bytes before LIB
    UWORD   LIB_POSSIZE     ; number of bytes after LIB
    UWORD   LIB_VERSION     ; major
    UWORD   LIB_REVISION    ; minor
    APTR    LIB_IDSTRING    ; ASCII identification
    ULONG   LIB_SUM         ; the system-calculated checksum
    UWORD   LIB_OPENCNT     ; number of current opens
    LABEL   LIB_SIZE        ; Warning: Size is not a longword multiple!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;As you can see the latter mentions the former reserving space for it at the beginning (&lt;code&gt;LN_SIZE&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;&lt;code&gt;LABEL&lt;/code&gt; is a macro that creates an alias for the current size of the structure, and you can find its definition in &lt;code&gt;include_i/exec/types.i&lt;/code&gt;. It works in conjunction with the type macros, which increment the global variable &lt;code&gt;SOFFSET&lt;/code&gt;. The code &lt;code&gt;LABEL LN_SIZE&lt;/code&gt; in the &lt;code&gt;LN&lt;/code&gt; structure produces the definition &lt;code&gt;LN_SIZE EQU 14&lt;/code&gt;, which is thus a simple marker and does not contribute to the size of the structure itself.&lt;/p&gt;&lt;p&gt;The comment after the &lt;code&gt;LABEL&lt;/code&gt; macro in the &lt;code&gt;LN&lt;/code&gt; structure says that the structure is word aligned, and indeed its size is a multiple of a word (2 bytes): 2 &lt;code&gt;APTR&lt;/code&gt; (8 bytes) + 1 &lt;code&gt;UBYTE&lt;/code&gt; (1 bytes) + 1 &lt;code&gt;BYTE&lt;/code&gt; (1 byte) + 1 &lt;code&gt;APTR&lt;/code&gt; (4 bytes) = 14 bytes.&lt;/p&gt;&lt;p&gt;To find the field updated by &lt;code&gt;Open&lt;/code&gt; we need to skip 32 bytes. So, after we skip the whole &lt;code&gt;LN&lt;/code&gt; structure, we still have 18 bytes to skip into the &lt;code&gt;LIB&lt;/code&gt; structure. At that offset we find the &lt;code&gt;LIB_OPENCNT&lt;/code&gt; field (remember that &lt;code&gt;UBYTE&lt;/code&gt; is 1 byte, &lt;code&gt;UWORD&lt;/code&gt; 2 bytes, and &lt;code&gt;APTR&lt;/code&gt; and &lt;code&gt;ULONG&lt;/code&gt; 4 bytes). This field is, as the comment reads, the "number of current opens". The system counts the number of times a library has been opened because a library with zero active users can safely be removed from memory.&lt;/p&gt;&lt;p&gt;The last instruction of the &lt;code&gt;Open&lt;/code&gt; function is &lt;code&gt;rts&lt;/code&gt; (ReTurn from Subroutine) that returns to the instruction after the &lt;code&gt;jsr&lt;/code&gt; that called the function.&lt;/p&gt;&lt;h3 id="close-expunge-and-the-reserved-slot"&gt;Close, Expunge, and the reserved slot&lt;/h3&gt;&lt;p&gt;Immediately after the definition of the &lt;code&gt;Open&lt;/code&gt; function, we find the definition of &lt;code&gt;Close&lt;/code&gt;, listed in the vector table as &lt;code&gt;0x08a8&lt;/code&gt;, which becomes &lt;code&gt;0x1a7c + 0x08a8 = 0x2324&lt;/code&gt;. The next two entries in the vector table contain the same value &lt;code&gt;0x08ac&lt;/code&gt;, which translates to the absolute address &lt;code&gt;0x1a7c + 0x08ac = 0x2328&lt;/code&gt;. This address is then the location of both the &lt;code&gt;Expunge&lt;/code&gt; function and the reserved function that must return 0.&lt;/p&gt;&lt;p&gt;The code of the &lt;code&gt;Close&lt;/code&gt; function is very simple, it just decrements the open counter (&lt;code&gt;0x20&lt;/code&gt; in the library). There is no explicit &lt;code&gt;rts&lt;/code&gt; as &lt;code&gt;Close&lt;/code&gt; uses the adjacent &lt;code&gt;Expunge&lt;/code&gt; code for that. Since it's impossible to remove the Exec library in the Amiga system, the &lt;code&gt;Expunge&lt;/code&gt; function of the Exec library just returns 0, which is exactly what the reserved function has to do (thus the same address in the vector table), and what &lt;code&gt;Close&lt;/code&gt; does after having decremented the open counter.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;; Close
00002324: 536e 0020     subq.w  #0x1,0x20(a6)

; Expunge
00002328: 7000          moveq   #0,d0
0000232a: 4e75          rts     
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 id="makefunctions"&gt;MakeFunctions&lt;a class="headerlink" href="#makefunctions" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;MakeFunctions&lt;/code&gt; routine is used by Exec to create the vector table at the beginning of the library when it is loaded in memory. You might recall that the vector table is created backward from the beginning of the library, thus allowing to use a simpler addressing scheme.&lt;/p&gt;&lt;p&gt;The prototype of the &lt;code&gt;MakeFunctions&lt;/code&gt; routine is&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;size = MakeFunctions(addess, vectors, offset)
d0                   a0      a1       a2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;and the code that we found in one of the previous investigations is at offset &lt;code&gt;0x15b2&lt;/code&gt;&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000015b2: 2f0b                      move.l  a3,-(sp)
000015b4: 7000                      moveq   #0,d0
000015b6: 220a                      move.l  a2,d1
000015b8: 6716                      beq.b   0x15d0
000015ba: 3219                      move.w  (a1)+,d1
000015bc: 0c41 ffff                 cmpi.w  #-0x1,d1
000015c0: 6722                      beq.b   0x15e4
000015c2: 47f2 1000                 lea     (0,a2,d1.w),a3
000015c6: 210b                      move.l  a3,-(a0)
000015c8: 313c 4ef9                 move.w  #0x4ef9,-(a0)
000015cc: 5c80                      addq.l  #0x6,d0
000015ce: 60ea                      bra.b   0x15ba
000015d0: 2219                      move.l  (a1)+,d1
000015d2: 0c81 ffff ffff            cmpi.l  #-0x1,d1
000015d8: 670a                      beq.b   0x15e4
000015da: 2101                      move.l  d1,-(a0)
000015dc: 313c 4ef9                 move.w  #0x4ef9,-(a0)
000015e0: 5c80                      addq.l  #0x6,d0
000015e2: 60ec                      bra.b   0x15d0
000015e4: 265f                      movea.l (sp)+,a3
000015e6: 4e75                      rts     
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The code is probably easier to read if we replace the addresses with some labels&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Setup:
000015b2: 2f0b                      move.l  a3,-(sp)
000015b4: 7000                      moveq   #0,d0
000015b6: 220a                      move.l  a2,d1
000015b8: 6716                      beq.b   Absolute

Relative:
000015ba: 3219                      move.w  (a1)+,d1
000015bc: 0c41 ffff                 cmpi.w  #-0x1,d1
000015c0: 6722                      beq.b   Cleanup
000015c2: 47f2 1000                 lea     (0,a2,d1.w),a3
000015c6: 210b                      move.l  a3,-(a0)
000015c8: 313c 4ef9                 move.w  #0x4ef9,-(a0)
000015cc: 5c80                      addq.l  #0x6,d0
000015ce: 60ea                      bra.b   Relative

Absolute:
000015d0: 2219                      move.l  (a1)+,d1
000015d2: 0c81 ffff ffff            cmpi.l  #-0x1,d1
000015d8: 670a                      beq.b   Cleanup
000015da: 2101                      move.l  d1,-(a0)
000015dc: 313c 4ef9                 move.w  #0x4ef9,-(a0)
000015e0: 5c80                      addq.l  #0x6,d0
000015e2: 60ec                      bra.b   Absolute

Cleanup:
000015e4: 265f                      movea.l (sp)+,a3
000015e6: 4e75                      rts     
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 id="setup"&gt;Setup&lt;/h3&gt;&lt;p&gt;The first part of the code is&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Setup:
000015b2: 2f0b                      move.l  a3,-(sp)
000015b4: 7000                      moveq   #0,d0
000015b6: 220a                      move.l  a2,d1
000015b8: 6716                      beq.b   Absolute
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The first thing this code does is to save the &lt;code&gt;a3&lt;/code&gt; register in the stack because it will be changed during the routine.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Setup:
000015b2: 2f0b                      move.l  a3,-(sp)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;In Assembly, variables are provided by registers and thus are not namespaced, as the registers are the same through the whole program. This is why you should save and restore them and document which one you will change, for instance to return values.&lt;/p&gt;&lt;p&gt;Secondly, the code sets the &lt;code&gt;d0&lt;/code&gt; register to 0.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000015b4: 7000                      moveq   #0,d0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This register, according to the function prototype, will contain the final size of the jump table, and 0 is a sensible starting value.&lt;/p&gt;&lt;p&gt;Lastly, the code moves the &lt;code&gt;a2&lt;/code&gt; register to &lt;code&gt;d1&lt;/code&gt; to be able to manipulate it. &lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000015b6: 220a                      move.l  a2,d1
000015b8: 6716                      beq.b   Absolute
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This, however, also sets the processor flags according to the value of &lt;code&gt;a2&lt;/code&gt; itself, and those flags are used in the next &lt;code&gt;beq.b&lt;/code&gt; instruction. If &lt;code&gt;a2&lt;/code&gt; contains the value 0 the table is absolute (code at &lt;code&gt;0x15d0&lt;/code&gt;, labelled &lt;code&gt;Absolute&lt;/code&gt; here) otherwise it is relative (code at &lt;code&gt;0x15ba&lt;/code&gt;, labelled &lt;code&gt;Relative&lt;/code&gt; here).&lt;/p&gt;&lt;h3 id="relative"&gt;Relative&lt;/h3&gt;&lt;p&gt;The second section manages relative jump vectors&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Relative:
000015ba: 3219                      move.w  (a1)+,d1
000015bc: 0c41 ffff                 cmpi.w  #-0x1,d1
000015c0: 6722                      beq.b   Cleanup
000015c2: 47f2 1000                 lea     (0,a2,d1.w),a3
000015c6: 210b                      move.l  a3,-(a0)
000015c8: 313c 4ef9                 move.w  #0x4ef9,-(a0)
000015cc: 5c80                      addq.l  #0x6,d0
000015ce: 60ea                      bra.b   Relative
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This fetches one of the vectors from the address stored in &lt;code&gt;a1&lt;/code&gt; (the address of the vector table), immediately incrementing the register value to point at the next vector.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Relative:
000015ba: 3219                      move.w  (a1)+,d1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;then compares it with &lt;code&gt;0xffff&lt;/code&gt; (or &lt;code&gt;#-0x1&lt;/code&gt;) to see if we reached the end of the table. In that case the code jumps to the fourth section (&lt;code&gt;0x15e4&lt;/code&gt;, labelled &lt;code&gt;Cleanup&lt;/code&gt; here), otherwise the execution continues with the next instruction&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000015bc: 0c41 ffff                 cmpi.w  #-0x1,d1
000015c0: 6722                      beq.b   Cleanup
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The routine then loads the effective address of the relative vector using &lt;code&gt;a2&lt;/code&gt; as the base addressing, and stores it in &lt;code&gt;a3&lt;/code&gt;. This register now contains the final entry that will be part of the jump table.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000015c2: 47f2 1000                 lea     (0,a2,d1.w),a3
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Since the address of the jump table is contained in &lt;code&gt;a0&lt;/code&gt;, the resulting absolute vector is stored there, then the code stores the value &lt;code&gt;0x4ef9&lt;/code&gt; which is the code for the &lt;code&gt;jmp&lt;/code&gt; instruction (more on this later)&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000015c6: 210b                      move.l  a3,-(a0)
000015c8: 313c 4ef9                 move.w  #0x4ef9,-(a0)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Note that since we are storing the jump table at negative addresses starting from the library's base pointer we have to copy the argument (the address) first and then the function (the code for &lt;code&gt;jmp&lt;/code&gt;). The last thing this part of the code does is to add 6 to the size of the jump table (1 word for the instruction, 2 words for the address) and then jumps back to the beginning of the loop.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000015cc: 5c80                      addq.l  #0x6,d0
000015ce: 60ea                      bra.b   Relative
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 id="absolute"&gt;Absolute&lt;/h3&gt;&lt;p&gt;The third section is very similar to the second one, because it performs the same actions, only with absolute addresses instead of relative ones.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000015d0: 2219                      move.l  (a1)+,d1
000015d2: 0c81 ffff ffff            cmpi.l  #-0x1,d1
000015d8: 670a                      beq.b   Cleanup
000015da: 2101                      move.l  d1,-(a0)
000015dc: 313c 4ef9                 move.w  #0x4ef9,-(a0)
000015e0: 5c80                      addq.l  #0x6,d0
000015e2: 60ec                      bra.b   Absolute
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The only difference with the previous section is that there is no need to load the effective address, as the value contained in &lt;code&gt;d1&lt;/code&gt; is already absolute, so the latter can be stored directly.&lt;/p&gt;&lt;h3 id="cleanup"&gt;Cleanup&lt;/h3&gt;&lt;p&gt;The last section simply restores the stack pointer, popping the value of the &lt;code&gt;a3&lt;/code&gt; register where the pointer was previously saved, and returns to the caller.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000015e4: 265f                      movea.l (sp)+,a3
000015e6: 4e75                      rts     
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 id="self-modifying-code"&gt;Self-modifying code&lt;a class="headerlink" href="#self-modifying-code" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The creation of the jump table performed by the &lt;code&gt;MakeFunctions&lt;/code&gt; routine leverages a very powerful feature of any assembly language, that is being able to produce code that self-modifies. This feature comes from a property of machine languages called &lt;a href="https://en.wikipedia.org/wiki/Homoiconicity"&gt;homoiconicity&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The basic idea of homoiconicity is that the language doesn't consider data and code two different things, thus allowing to use the code as an input for routines and to change it programmatically. Pay attention that self-modifying code is just one of the implications of homoiconicity, and not its definition.&lt;/p&gt;&lt;p&gt;Homoiconicity is a feature rarely provided by languages. It is very powerful, but it basically forces to keep the language at the level of its own AST (Abstract Syntax Tree), which in turn means that you cannot add a proper abstraction, or, if you prefer, a proper high level language, if we identify with this term a computer language that is similar to the human language.&lt;/p&gt;&lt;p&gt;Famous examples of high level languages that are homoiconic are Lisp and Prolog. Lisp is a language that manages lists and its syntax is based on... lists. This means that you can pass Lisp code to a function and transform it like you would do with standard data.&lt;/p&gt;&lt;p&gt;Back to the Motorola Assembly code, the line we are interested in is &lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000015c8: 313c 4ef9                 move.w  #0x4ef9,-(a0)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This decrements the address contained in &lt;code&gt;a0&lt;/code&gt; by 2 bytes, then stores at the resulting address the hexadecimal number &lt;code&gt;0x4ef9&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The interesting part is that the number &lt;code&gt;0x4ef9&lt;/code&gt; has a specific meaning for the Motorola 68000 processor, and namely that of the &lt;code&gt;jmp&lt;/code&gt; instruction. This is clearly shown by the tables in the Programmer's Reference Manual (Section 8, Instruction Format Summary, 8-15).&lt;/p&gt;&lt;p&gt;First we have to convert the number in binary, and we get&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0x4ef9 -&amp;gt; 0100 1110 1111 1001
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The first 10 bits (&lt;code&gt;0100 1110 11&lt;/code&gt;) already identify a &lt;code&gt;jmp&lt;/code&gt; instruction. The following 6 bits (&lt;code&gt;111 001&lt;/code&gt;) identify the addressing mode, which in this case is &lt;code&gt;Absolute Long&lt;/code&gt; or &lt;code&gt;(xxx).L&lt;/code&gt; (Programmer's Reference Manual, 4-108). This instruction shall then be followed by a 4 bytes absolute address. Please note that the function is a &lt;code&gt;jmp&lt;/code&gt; and not a &lt;code&gt;jsr&lt;/code&gt;, which will then not alter the address stored in the stack; a later &lt;code&gt;rts&lt;/code&gt; will thus return to the proper called of the function and not to the jump table.&lt;/p&gt;&lt;p&gt;With that &lt;code&gt;move.w&lt;/code&gt;, then, the code writes in memory some Assembly code. Techniques like this have been and are used by games and viruses to obfuscate the code, as a static analysis of the binary will not reveal what will be there only at runtime!&lt;/p&gt;&lt;h2 id="whats-next"&gt;What's next&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The next article will discuss the reason behind the address &lt;code&gt;0x4&lt;/code&gt; used for the Exec base address, and then will move on discussing linked lists and how Exec manages system resources using them.&lt;/p&gt;&lt;h2 id="resources"&gt;Resources&lt;a class="headerlink" href="#resources" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Motorola M68000 Family Programmer's Reference Manual - &lt;a href="https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf"&gt;https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://amigadev.elowar.com"&gt;AmigaOS Developer Docs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/blog_source/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Retro"></category><category term="assembly"></category><category term="amiga"></category><category term="retroprogramming"></category></entry><entry><title>Exploring the Amiga - Part 3</title><link href="https://www.thedigitalcatonline.com/blog/2018/06/08/exploring-the-amiga-3/" rel="alternate"></link><published>2018-06-08T12:30:00+01:00</published><updated>2021-02-26T08:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2018-06-08:/blog/2018/06/08/exploring-the-amiga-3/</id><summary type="html">&lt;p&gt;Exec and the Kickstart 1.3 vector table&lt;/p&gt;</summary><content type="html">&lt;h2 id="exec-and-the-vector-table"&gt;Exec and the vector table&lt;a class="headerlink" href="#exec-and-the-vector-table" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The Exec library is the base library of the Amiga system. This library is loaded in memory at boot time, and it is always open and available. Once loaded, it has the same structure of any other library, that is a prefix containing the jump table in reverse order, then the actual code.&lt;/p&gt;&lt;p&gt;The trick here is that Exec is the library used to load in memory other libraries, so the function that creates the structure in memory of a given library is contained here. To install Exec in memory, thus, we need to use a function which is part of the library itself.&lt;/p&gt;&lt;p&gt;This is one of the powers of the Assembly language. The property of treating the code as if it was pure data is called homoiconicity, and is something that can be rarely found in other languages. Lisp is a good example of a higher level homoiconic language.&lt;/p&gt;&lt;p&gt;Back to our vector table, we have to find a way to use the Exec library to install in memory the Exec library itself. The concept is not that complex, actually. The final structure we are trying to achieve is something like this:&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vectors:
    function1-vectors
    function2-vectors
    function3-vectors
function1:
    code
    [...]
function2:
    code
    [...]
function3:
    code
    [...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;In this situation we have 3 functions defined at the addresses &lt;code&gt;function1&lt;/code&gt;, &lt;code&gt;function2&lt;/code&gt;, and &lt;code&gt;function3&lt;/code&gt;. Somewhere in the code at the address &lt;code&gt;vectors&lt;/code&gt; there is a plain list that contains the addresses of those functions. Since the code can be relocated this list contains offsets relative to the &lt;code&gt;vectors&lt;/code&gt; table itself. So the first element of the table will be &lt;code&gt;function1-vectors&lt;/code&gt;, that is the subtraction between the two addresses, and so on.&lt;/p&gt;&lt;p&gt;For example we might have&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0042 0122
0044 01b8
0046 02d1
[...]
0164 code of function1
[...]
01fa code of function2
[...]
0313 code of function3
[...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Where the entry of the table are &lt;code&gt;0x164-0x42 = 0x122&lt;/code&gt;, &lt;code&gt;0x1fa-0x42 = 0x1b8&lt;/code&gt;, and &lt;code&gt;0x313-0x42 = 0x2d1&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The vectors table, thus, is the source from which we can calculate the jump table. The code to perform this, however, is contained in one of the functions itself, let's assume it's function number 2&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function1:
    code
    [...]
function2:
    for each address of &amp;lt;table&amp;gt; create
    a jump table entry relative to &amp;lt;start&amp;gt;
function3:
    code
    [...]
vectors:
    function1-vectors
    function2-vectors
    function3-vectors
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;As you can see the function at &lt;code&gt;function2&lt;/code&gt; (in this example) depends on a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; and a &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; parameters which will be contained in some register. At this point, since the address &lt;code&gt;function2&lt;/code&gt; is known, there can be some code that runs the function on the table contained in the code itself&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;setup:
    run &amp;lt;function2&amp;gt; on &amp;lt;vectors_offset&amp;gt; and &amp;lt;setup&amp;gt;
function1:
    code
    [...]
function2:
    for each address of the vector table create
    a jump table entry relative to START
function3:
    code
    [...]
vectors:
    function1-vectors
    function2-vectors
    function3-vectors
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;&amp;lt;vectors_offset&amp;gt;&lt;/code&gt; is a hardcoded offset (as the displacement of &lt;code&gt;vectors&lt;/code&gt; relative to &lt;code&gt;setup&lt;/code&gt; is known) and &lt;code&gt;setup&lt;/code&gt; is the effective address that the &lt;code&gt;setup&lt;/code&gt; routine has at runtime.&lt;/p&gt;&lt;p&gt;This mechanism creates then a library that can install other libraries through a given function, but that can at the same time install itself.&lt;/p&gt;&lt;h2 id="the-kickstart-vector-table"&gt;The Kickstart vector table&lt;a class="headerlink" href="#the-kickstart-vector-table" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;An actual example of the vector table mechanism can be found in the Kickstart code. Kickstart is the BIOS of the Amiga system, and is loaded at boot time either from disk (Amiga 1000 and some Amiga 3000) or from a ROM.&lt;/p&gt;&lt;p&gt;The code of Kickstart 1.3 can be found &lt;a href="https://www.romcollector.com/emulators-firmware-i-29.html"&gt;here&lt;/a&gt; and you can easily disassemble it with vdasm&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vda68k Kickstart1.3.rom &amp;gt; Kickstart1.3.asm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Inside this code we can see a practical implementation of the mechanism described above.&lt;/p&gt;&lt;p&gt;The mandatory disclaimer: &lt;strong&gt;to use the Amiga Kickstart ROM images you must own a license.&lt;/strong&gt; (see the Resources section).&lt;/p&gt;&lt;p&gt;When you disassemble some binary code, however, you don't get some nice source code written in a high level language. Well, not with a simple disassembler like vdasm, anyway. What you get is the one to one interpretation of the binary values according to the processor's conventions, and this includes parts of the binary file that are pure data. The disassembler has no way to know if some binary number represents an instruction or a pure number. Moreover, there is no trace of the original labels used by the author(s) of the code, as they are lost in the translation to machine language, when they are converted to pure addresses.&lt;/p&gt;&lt;p&gt;The practice of understanding how a system works starting from the pure implementation is called "reversing", and personally I consider it one of the most fascinating tasks a programmer can face.&lt;/p&gt;&lt;p&gt;The purpose of the present investigation is to find the Kickstart 1.3 vector table, and with that to find the position and implementation of the Exec functions. Well, let's start.&lt;/p&gt;&lt;h3 id="step-1"&gt;Step 1&lt;/h3&gt;&lt;p&gt;I know that &lt;code&gt;MakeFunctions&lt;/code&gt; is used to create in memory the structure of Exec itself. So I know that somewhere that function is invoked on the code that I am studying.&lt;/p&gt;&lt;p&gt;Since one of the parameters of the &lt;code&gt;MakeFunctions&lt;/code&gt; routine is the name of the library a good starting point might be a string containing &lt;code&gt;exec.library&lt;/code&gt; (which is the standard name of this library in the Amiga system). Once I find that string I can look for a function call that uses its address as a parameter.&lt;/p&gt;&lt;p&gt;The byte sequence that represents that string (using ASCII) is &lt;code&gt;65 78 65 63 2E 6C 69 62 72 61 72 79&lt;/code&gt;. In Kickstart 1.3 the offset of this string is &lt;code&gt;0x00a8&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Remember that what you see in the disassembled code is not a string. The disassembler tries to convert everything into instructions, so you will find something like&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;000000a8: 6578                      bcs.b   0x122
000000aa: 6563                      bcs.b   0x10f
000000ac: 2e6c 6962                 movea.l 0x6962(a4),sp
000000b0: 7261                      moveq   #0x61,d1
000000b2: 7279                      moveq   #0x79,d1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;When looking for strings it's better to use a hexadecimal editor that can show and search in the ASCII representation of the binary code.&lt;/p&gt;&lt;div class="imageblock"&gt;&lt;img src="/images/exploring-the-amiga-3/search-exec-library-string.png"&gt;&lt;div class="title"&gt;Search exec.library string&lt;/div&gt;&lt;/div&gt;&lt;p&gt;We know that Kickstart is loaded at address 0xfc0000 (Amiga System Programmer's Guide, page 67), so all the 16-bit addresses are relative to 0x00fc. The library name pointer is then &lt;code&gt;00fc 00a8&lt;/code&gt;.&lt;/p&gt;&lt;h3 id="step-2"&gt;Step 2&lt;/h3&gt;&lt;p&gt;In the Amiga system all libraries have a specific structure when loaded in memory. Apart from the prefixed jump table, the library code itself is wrapped in a fixed structure that allows us to read and use it.&lt;/p&gt;&lt;p&gt;Libraries in memory are nodes of a linked list, so the dist thing we expect to find is the structure of the node itself. Then, inside the node, we expect to find the actual library structure.&lt;/p&gt;&lt;p&gt;The include file &lt;code&gt;include_i/exec/nodes.i&lt;/code&gt; tells us that a standard linked list node has the following structure&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   STRUCTURE    LN,0    ; List Node
    APTR    LN_SUCC ; Pointer to next (successor)
    APTR    LN_PRED ; Pointer to previous (predecessor)
    UBYTE   LN_TYPE
    BYTE    LN_PRI  ; Priority, for sorting
    APTR    LN_NAME ; ID string, null terminated
    LABEL   LN_SIZE ; Note: word aligned
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The two 32-bit pointers &lt;code&gt;LN_SUCC&lt;/code&gt; and &lt;code&gt;LN_PRED&lt;/code&gt; are created when the node is loaded in memory, so we need to look for the rest of the structure, namely 1 byte with &lt;code&gt;LN_TYPE&lt;/code&gt;, 1 byte with &lt;code&gt;LN_PRI&lt;/code&gt; and 4 bytes with &lt;code&gt;LN_NAME&lt;/code&gt;. From the same file &lt;code&gt;include_i/exec/nodes.i&lt;/code&gt; we know that the node type for a library is &lt;code&gt;09&lt;/code&gt;&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NT_LIBRARY  EQU 9
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;So the pattern we are looking for is &lt;code&gt;09XX 00fc 00a8&lt;/code&gt;, respectively the node type (&lt;code&gt;09&lt;/code&gt;), an unknown priority (&lt;code&gt;XX&lt;/code&gt;), and the library name pointer &lt;code&gt;00fc 00a8&lt;/code&gt;. We also know that the pattern is likely to be stored towards the beginning of the whole ROM, as one of the first things the library will do is to create its own structure in memory. This last assumption is not to be taken for granted, as the code could easily jump around, but it's a reasonable one.&lt;/p&gt;&lt;p&gt;In the Kickstart 1.3 code this pattern can be found at offset &lt;code&gt;0x030c&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;![Search library pattern](/images/exploring-the-amiga-3/search-library-pattern.png)&lt;/p&gt;&lt;p&gt;If this is the correct position of the node structure, we expect to find just after it the structure of the library as described in the include file &lt;code&gt;include_i/exec/libraries.i&lt;/code&gt;&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; STRUCTURE LIB,LN_SIZE     
    UBYTE   LIB_FLAGS       ; see below
    UBYTE   LIB_pad         ; must be zero
    UWORD   LIB_NEGSIZE     ; number of bytes before LIB
    UWORD   LIB_POSSIZE     ; number of bytes after LIB
    UWORD   LIB_VERSION     ; major
    UWORD   LIB_REVISION    ; minor
    APTR    LIB_IDSTRING    ; ASCII identification
    ULONG   LIB_SUM         ; the system-calculated checksum
    UWORD   LIB_OPENCNT     ; number of current opens
    LABEL   LIB_SIZE        ; Warning: Size is not a longword multiple!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The binary code of Kickstart 1.3 from address &lt;code&gt;0xfc030c&lt;/code&gt; is indeed the following&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0000030c: 09          ; LN_TYPE
0000030d: 00          ; LN_PRI
0000030e: 00fc 00a8   ; LN_NAME
00000312: 06          ; LIB_FLAGS
00000313: 00          ; LIB_pad
00000314: 0000        ; LIB_NEGSIZE
00000316: 024c        ; LIB_POSSIZE
00000318: 0022        ; LIB_VERSION
0000031a: 0002        ; LIB_REVISION
0000031c: 00fc 0018   ; LIB_IDSTRING
00000320: 0000 0000   ; LIB_SUM
00000324: 0001        ; LIB_OPENCNT
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;From this I know that the version of &lt;code&gt;exec&lt;/code&gt; contained in this Kickstart is 34 (&lt;code&gt;0x22&lt;/code&gt;) revision 2 (&lt;code&gt;0x02&lt;/code&gt;), and this is confirmed by the ID string at address &lt;code&gt;0xfc0018&lt;/code&gt;, which is &lt;code&gt;exec 34.2 (28 Oct 1987)&lt;/code&gt;.&lt;/p&gt;&lt;div class="imageblock"&gt;&lt;img src="/images/exploring-the-amiga-3/exec-version-string.png"&gt;&lt;div class="title"&gt;Exec version string&lt;/div&gt;&lt;/div&gt;&lt;h3 id="step-3"&gt;Step 3&lt;/h3&gt;&lt;p&gt;What we are really interested in, at this point, is where the address of this structure is mentioned in the code, as it will be used to create the library structure. Since the &lt;code&gt;MakeFunctions&lt;/code&gt; routine will be invoked after creating the library structure, we can know from here where the former is defined.&lt;/p&gt;&lt;p&gt;The structure is at address &lt;code&gt;0x030c&lt;/code&gt; and we are looking for and instruction like &lt;code&gt;lea 0x30c(pc),ax&lt;/code&gt;, where &lt;code&gt;ax&lt;/code&gt; is one of the address registers &lt;code&gt;a0&lt;/code&gt;-&lt;code&gt;a7&lt;/code&gt;. Loading the address of a table in a register is the standard way to loop on the table to modify it or to copy the bytes somewhere. It was interesting to discover why this is the preferred way to do it&lt;/p&gt;&lt;div class="callout"&gt;&lt;div class="content"&gt;&lt;p&gt;The 68000 does not allow you to execute a MOVE instruction with a destination relative to the program counter (PC). In the view of the 68000 designers, code should not patch itself. If you must change a table in the middle of code, you must point to it with an instruction like LEA TABLE(PC),An and then alter it through An. (Self-modifying code is especially bad for 68000 programs that may someday run on the 68020, because the 68020's instruction cache normally assumes that code is pure.&lt;/p&gt;
&lt;p&gt;(from &lt;a href="http://www.easy68k.com/paulrsm/doc/trick68k.htm"&gt;http://www.easy68k.com/paulrsm/doc/trick68k.htm&lt;/a&gt;)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;At address &lt;code&gt;0x0364&lt;/code&gt; we find the following code&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00000360: 43ee 0008                 lea     0x8(a6),a1
00000364: 41fa ffa6                 lea     0x30c(pc),a0
00000368: 700c                      moveq   #0xc,d0
0000036a: 32d8                      move.w  (a0)+,(a1)+
0000036c: 51c8 fffc                 dbf     d0,0x36a
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;which actually installs in memory the exec library. Let's analyse this code instruction by instruction.&lt;/p&gt;&lt;p&gt;Since the ExecBase address is contained in &lt;code&gt;a6&lt;/code&gt; (this is done previously in the code), that address is incremented by 8 and the result is copied into the &lt;code&gt;a1&lt;/code&gt; register. The 8 bytes leave space for the &lt;code&gt;LN_SUCC&lt;/code&gt; and &lt;code&gt;LN_PRED&lt;/code&gt; pointers. Then, the code loads the address of the table in &lt;code&gt;a0&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;The loop is performed on 26 bytes. The number 12 (&lt;code&gt;0xc&lt;/code&gt;) is copied  into &lt;code&gt;d0&lt;/code&gt;, but the instruction &lt;code&gt;dbf&lt;/code&gt; (&lt;code&gt;dbra&lt;/code&gt; in some assemblers) keeps jumping to &lt;code&gt;0x36a&lt;/code&gt; until the value of &lt;code&gt;d0&lt;/code&gt; is -1, so it is actually performing the loop code 13 times. Since the &lt;code&gt;move.w&lt;/code&gt; instruction moves words we are copying 26 bytes, which is exactly the size of the library node from &lt;code&gt;LN_TYPE&lt;/code&gt; to &lt;code&gt;LIB_OPENCNT&lt;/code&gt; included.&lt;/p&gt;&lt;p&gt;The next 5 instructions are&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00000370: 204e                      movea.l a6,a0
00000372: 43fa 1708                 lea     0x1a7c(pc),a1
00000376: 2449                      movea.l a1,a2
00000378: 6100 1238                 bsr.w   0x15b2
0000037c: 3d40 0010                 move.w  d0,0x10(a6)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;From the &lt;a href="http://amigadev.elowar.com/read/ADCD_2.1/Includes_and_Autodocs_3._guide/node021A.html"&gt;documentation&lt;/a&gt; we know that &lt;code&gt;MakeFunctions&lt;/code&gt; has the following prototype&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;size = MakeFunctions(address, vectors, offset)
d0                   a0       a1       a2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;address&lt;/code&gt; is the address where the jump table will be constructed, &lt;code&gt;vectors&lt;/code&gt; is a table that lists the function addresses (the one we are looking for) and &lt;code&gt;offset&lt;/code&gt; tells the function if the function addresses are absolute (value is &lt;code&gt;0&lt;/code&gt;) or relative (in which case offset is the base for the displacement). The list of addresses has to be terminated with -1 (&lt;code&gt;0xffff&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;So the first line stores in &lt;code&gt;a0&lt;/code&gt; the content of &lt;code&gt;a6&lt;/code&gt;, which is the ExecBase address. This is where we want to install the library. The second line loads the address of the vectors table in &lt;code&gt;a1&lt;/code&gt; and the same value is stored in &lt;code&gt;a2&lt;/code&gt;. Then the code branches to the subroutine at &lt;code&gt;0x15b2&lt;/code&gt; which at this point we know is the address of &lt;code&gt;MakeFunctions&lt;/code&gt;.&lt;/p&gt;&lt;h3 id="step-4"&gt;Step 4&lt;/h3&gt;&lt;p&gt;We extracted two useful information from this code. First, the vector table is at address &lt;code&gt;0x1a7c&lt;/code&gt;, and second the &lt;code&gt;MakeFunctions&lt;/code&gt; subroutine is at address &lt;code&gt;0x15b2&lt;/code&gt;. The latter will be useful to double check the content of the vector table.&lt;/p&gt;&lt;p&gt;After &lt;code&gt;MakeFunctions&lt;/code&gt; has been executed, the code returns and the next instruction stores the final size of the jump table 16 bytes after the address contained in &lt;code&gt;a6&lt;/code&gt;. With the help of the structures shown above we know that at that offset we can find the &lt;code&gt;LIB_NEGSIZE&lt;/code&gt; field, that contains the size of the jump table (number of bytes before the library).&lt;/p&gt;&lt;p&gt;It's time to double-check what we found. There should be a table at address &lt;code&gt;0x1a7c&lt;/code&gt; that contains function addresses in the order listed by the include file &lt;code&gt;include_i/exec/exec_lib.i&lt;/code&gt;. As &lt;code&gt;MakeFunctions&lt;/code&gt; itself is listed in that file at the 11th place we can check if the table is consistent. That address should point a function at &lt;code&gt;0x15b2&lt;/code&gt;, according to the previous code.&lt;/p&gt;&lt;p&gt;The values at &lt;code&gt;0x1a7c&lt;/code&gt; are the following &lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00001a7c: 08a0
00001a7e: 08a8
00001a80: 08ac
00001a82: 08ac
00001a84: ee6a
00001a86: f420
00001a88: f446
00001a8a: 04f8
00001a8c: f4a0
00001a8e: f4ea
00001a90: f58e
00001a92: f0b0
00001a94: f188
00001a96: faac
00001a98: fb36
00001a9a: f080
; ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The file &lt;code&gt;include_i/exec/exec_lib.i&lt;/code&gt; doesn't contain the first 4 reserved vectors (the functions &lt;code&gt;Open&lt;/code&gt;, &lt;code&gt;Close&lt;/code&gt;, &lt;code&gt;Expunge&lt;/code&gt;, and the reserved space), so considering that those are in the vector table we should check the 15th, were we find &lt;code&gt;0xfb36&lt;/code&gt;. This is an offset relative to the beginning of the table, so the function is at &lt;code&gt;0x1a7c + 0xfb36 = 0x15b2&lt;/code&gt; (addresses are 16 bits numbers), as we already discovered.&lt;/p&gt;&lt;p&gt;This shows that our investigation is correct. The Kickstart 1.3 vector table is at address &lt;code&gt;0x1a7c&lt;/code&gt; and from there we can reach and analyse all the functions contained in the base Amiga library.&lt;/p&gt;&lt;h2 id="whats-next"&gt;What's next&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In the next article I will show the code of the 4 Exec base functions and discuss &lt;code&gt;MakeFunctions&lt;/code&gt; in depth. I will also briefly discuss self-modifying code, as &lt;code&gt;MakeFunctions&lt;/code&gt; has a good example of it.&lt;/p&gt;&lt;h2 id="resources"&gt;Resources&lt;a class="headerlink" href="#resources" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Amiga System Programmers Guide, Abacus - &lt;a href="https://archive.org/details/Amiga_System_Programmers_Guide_1988_Abacus"&gt;https://archive.org/details/Amiga_System_Programmers_Guide_1988_Abacus&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://amigadev.elowar.com"&gt;AmigaOS Developer Docs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Amiga Forever package sold by Cloanto &lt;a href="https://www.amigaforever.com"&gt;here&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="updates"&gt;Updates&lt;a class="headerlink" href="#updates" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;2018-06-23: As &lt;a href="https://new.reddit.com/user/Malor"&gt;Malor&lt;/a&gt; pointed out on Reddit (&lt;a href="https://new.reddit.com/r/programming/comments/8pkgk0/exploring_the_amiga_part_1/e0cifax"&gt;here&lt;/a&gt;) there is no need to own the original hardware, as licenses are still sold by Cloanto. Thanks Malor!&lt;/p&gt;&lt;h2 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/blog_source/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Retro"></category><category term="assembly"></category><category term="amiga"></category><category term="retroprogramming"></category></entry><entry><title>Exploring the Amiga - Part 2</title><link href="https://www.thedigitalcatonline.com/blog/2018/05/28/exploring-the-amiga-2/" rel="alternate"></link><published>2018-05-28T15:00:00+01:00</published><updated>2021-12-21T08:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2018-05-28:/blog/2018/05/28/exploring-the-amiga-2/</id><summary type="html">&lt;p&gt;The jump table of libraries in the Amiga system, types and structures of Kickstart 1.3&lt;/p&gt;</summary><content type="html">&lt;h2 id="the-library-jump-table"&gt;The library jump table&lt;a class="headerlink" href="#the-library-jump-table" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As already mentioned when a library is loaded in memory a jump table is created just before the library base address. This table contains the addresses of the functions exposed by the library, and Exec itself has one.&lt;/p&gt;&lt;p&gt;The jump table functions order for the Exec library is specified in one of the include files provided by the NDK, namely &lt;code&gt;include_i/exec/exec_lib.i&lt;/code&gt;.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    FUNCDEF Supervisor
    FUNCDEF execPrivate1
    FUNCDEF execPrivate2
    FUNCDEF execPrivate3
    ...
    FUNCDEF OpenLibrary
    ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;As you can see this file makes use of the &lt;code&gt;FUNCDEF&lt;/code&gt; macro, which is not provided and has to be implemented by the coder. The idea of the macro is very simple: as the order of the jump table does not change we can just replace the first &lt;code&gt;FUNCDEF&lt;/code&gt; with the offset of the first function in the library and then increment this offset with the default size of the jump address. The expected output of the macro is&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    _LVOSupervisor     EQU     -30
    _LVOexecPrivate1   EQU     -36
    _LVOexecPrivate2   EQU     -42
    _LVOexecPrivate3   EQU     -48
    ...
    _LVOOpenLibrary    EQU     -552
    ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Please note that the name of the function has been replaced by another string prepending &lt;code&gt;_LVO&lt;/code&gt; to avoid clashes with the actual function definition (LVO stands for Library Vector Offset).&lt;/p&gt;&lt;p&gt;The above figures come from the "Special Constants" section contained in the &lt;code&gt;include_i/exec/libraries.i&lt;/code&gt; file&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*------ Special Constants ---------------------------------------
LIB_VECTSIZE    EQU 6       ;Each library entry takes 6 bytes
LIB_RESERVED    EQU 4       ;Exec reserves the first 4 vectors
LIB_BASE        EQU -LIB_VECTSIZE
LIB_USERDEF     EQU LIB_BASE-(LIB_RESERVED*LIB_VECTSIZE) ;First user func
LIB_NONSTD      EQU LIB_USERDEF
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;AS you can see from the comments, Exec reserves the first 4 vectors, so the first function's address is &lt;code&gt;LIB_USERDEF&lt;/code&gt;. To understand why the addresses are negative and how the offset is computed let's get a snapshot of the library once it has been loaded in memory&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                               HIGHER MEMORY ADDRESSES
                             +-------------------------+
Last byte of the             | End of the library      |
library loaded in ---------&amp;gt; +-------------------------+
memory                       | [...]                   |
                             +-------------------------+
                             | Content of the library  |
                             +-------------------------+
                             | Library structure       |
Library base address ------&amp;gt; +-------------------------+
                             | 1st reserved vector     | 
                             +-------------------------+ &amp;lt;--- LIB_BASE
                             | 2nd reserved vector     | 
                             +-------------------------+ &amp;lt;--+
                             | 3rd reserved vector     |    | LIB_VECTSIZE
                             +-------------------------+ &amp;lt;--+
                             | 4th reserved vector     | 
                             +-------------------------+ 
                             | 1st defined function    | 
                             +-------------------------+ &amp;lt;--- LIB_USERDEF
                             | 2nd defined function    |
                             +-------------------------+
                             | [...]                   |
                             +-------------------------+
First byte of the            | End of the jump table   |
library loaded in ---------&amp;gt; +-------------------------+
memory                         LOWER MEMORY ADDRESSES
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;You can find an official version of this in the &lt;a href="http://amigadev.elowar.com/read/ADCD_2.1/AmigaMail_Vol2_guide/node0189.html"&gt;documentation &lt;/a&gt;. Pay attention that the picture in the documentation represents memory upside down, with lower memory addresses towards the top of the page.&lt;/p&gt;&lt;p&gt;As you can see the library is loaded as expected from the base address towards the higher memory addresses, but at the same time the jump table is prefixed &lt;em&gt;in reverse order&lt;/em&gt;. This is done to allow you to find the address of a function with a simple (negative) indexing instead of a more complex algorithm. Function number 1 is at address &lt;code&gt;-1 * address_size&lt;/code&gt;, function number 2 at address &lt;code&gt;-2 * address_size&lt;/code&gt;, etc.&lt;/p&gt;&lt;p&gt;This is why we use negative offsets to call library functions but positive ones to access the library data and structures.&lt;/p&gt;&lt;p&gt;You can also see from the figure where the Special Constants &lt;code&gt;LIB_BASE&lt;/code&gt; and &lt;code&gt;LIB_USERDEF&lt;/code&gt; are located. The actual values are&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LIB_BASE    EQU -6
LIB_USERDEF EQU -30
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;A good definition of the &lt;code&gt;FUNCDEF&lt;/code&gt; macro, thus, is the following&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    INCLUDE &amp;quot;exec/libraries.i&amp;quot;

    MACRO   FUNCDEF
_LVO\1      EQU      FUNC_CNT
FUNC_CNT    SET      FUNC_CNT-LIB_VECTSIZE
    ENDM

FUNC_CNT    SET      LIB_USERDEF
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The last line initialises the &lt;code&gt;FUNC_CNT&lt;/code&gt; symbol with the &lt;code&gt;LIB_USERDEF&lt;/code&gt; value. Then each call of the &lt;code&gt;FUNCDEF &amp;lt;arg&amp;gt;&lt;/code&gt; macro does two things:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Creates the &lt;code&gt;_LVO&amp;lt;arg&amp;gt;&lt;/code&gt; symbol with value &lt;code&gt;FUNC_CNT&lt;/code&gt; (e.g. &lt;code&gt;_LVOSupervisor EQU -30&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;Decrements the &lt;code&gt;FUNC_CNT&lt;/code&gt; symbol by &lt;code&gt;LIB_VECTSIZE&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Please note that the example &lt;code&gt;FUNCDEF&lt;/code&gt; that you can find (commented) in &lt;code&gt;libraries.i&lt;/code&gt; won't work out of the box as &lt;code&gt;FUNC_CNT&lt;/code&gt; is defined inside the macro itself, while it has to be already defined before the first use of the macro.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*------ FUNCDEF is used to parse library offset tables.  Many applications
*------ need a special version of FUNCDEF - you provide your own macro
*------ to match your needs.  Here is an example:
*
*    FUNCDEF     MACRO
*    _LVO\1      EQU    FUNC_CNT
*    FUNC_CNT    SET    FUNC_CNT-6  * Standard offset-6 bytes each
*    FUNC_CNT    EQU    LIB_USERDEF * Skip 4 standard vectors
*                ENDM
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;You can put the &lt;code&gt;FUNCDEF&lt;/code&gt; macro code in a local include file like &lt;code&gt;funcdef.i&lt;/code&gt;. Including it your code allows you to use &lt;code&gt;_LVO&lt;/code&gt; prefixed labels for the functions that you want to load&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    INCLUDE &amp;quot;funcdef.i&amp;quot;
    INCLUDE &amp;quot;exec/exec_lib.i&amp;quot;

    move.l  4.w,a6
    clr.l   d0
    move.l  #libname,a1
    jsr     _LVOOpenLibrary(a6)

libname:
    dc.b &amp;quot;somename.library&amp;quot;,0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Finally, if you want to be even more explicit you can use the &lt;code&gt;CALLLIB&lt;/code&gt; macro defined in &lt;code&gt;libraries.i&lt;/code&gt; and write&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    INCLUDE &amp;quot;funcdef.i&amp;quot;
    INCLUDE &amp;quot;exec/exec_lib.i&amp;quot;
    INCLUDE &amp;quot;exec/libraries.i&amp;quot;

    move.l  4.w,a6
    clr.l   d0
    move.l  #libname,a1
    CALLLIB _LVOOpenLibrary

libname:
    dc.b &amp;quot;somename.library&amp;quot;,0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 id="the-four-reserved-vectors"&gt;The four reserved vectors&lt;a class="headerlink" href="#the-four-reserved-vectors" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As we saw, the Amiga system reserves 4 vectors at the beginning of the jump table of a library. These 4 spaces host 3 standard functions that shall be provided by any library, &lt;code&gt;Open()&lt;/code&gt;, &lt;code&gt;Close()&lt;/code&gt;, and &lt;code&gt;Expunge()&lt;/code&gt;. The fourth slot is kept for possible future expansions and must contain a function that returns 0.&lt;/p&gt;&lt;p&gt;The offsets of these functions are contained in the &lt;code&gt;include_i/exec/libraries.i&lt;/code&gt; file&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*----------------------------------------------------------------
*
*   Standard Library Functions
*
*----------------------------------------------------------------

    LIBINIT LIB_BASE

    LIBDEF  LIB_OPEN
    LIBDEF  LIB_CLOSE
    LIBDEF  LIB_EXPUNGE ; must exist in all libraries
    LIBDEF  LIB_EXTFUNC ; for future expansion - must return zero.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;the effect of the above macros with the previous constants is&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LIB_OPEN        EQU     -6
LIB_CLOSE       EQU     -12
LIB_EXPUNGE     EQU     -18
LIB_EXTFUNC     EQU     -24
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;You can try to follow the definitions of the &lt;code&gt;LIBINIT&lt;/code&gt; and &lt;code&gt;LIBDEF&lt;/code&gt; macros to obtain the same result.&lt;/p&gt;&lt;h2 id="types-and-structures"&gt;Types and structures&lt;a class="headerlink" href="#types-and-structures" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let's see how the Exec library defines its types, which are the base components of the Amiga system. The main entry point for this investigation is the &lt;code&gt;include_i/exec/types.i&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;When working with data structures in Assembly, everything is expressed in terms of offsets. The main idea behind structures is to create something like this&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;STRUCT1         EQU     0
OFFS            SET     0
FIELD1          EQU     OFFS
OFFS            EQU     OFFS+SIZE_OF_FIELD1
FIELD2          EQU     OFFS
OFFS            EQU     OFFS+SIZE_OF_FIELD2
; ...
STRUCT1_SIZE    EQU     OFFS
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;which, once run through the macro expansion, creates the following code&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;STRUCT1         EQU     0
FIELD1          EQU     0
FIELD2          EQU     SIZE_OF_FIELD1
FIIELD3         EQU     SIZE_OF_FIELD1+SIZE_OF_FIELD2
; ...
STRUCT1_SIZE    EQU     SIZE_OF_FIELD1+...+SIZE_OF_FIELDn
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;So, the type macros are all defined with code like this&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TYPENAME    MACRO
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+SIZE_OF_TYPE
            ENDM
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;For example the &lt;code&gt;BYTE&lt;/code&gt; macro is&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BYTE        MACRO       ; byte (8 bits)
\1          EQU     SOFFSET
SOFFSET     SET     SOFFSET+1
            ENDM
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Note that the field is defined with &lt;code&gt;EQU&lt;/code&gt; to avoid unwanted overwrites, while &lt;code&gt;SOFFSET&lt;/code&gt; uses &lt;code&gt;SET&lt;/code&gt; that allows to redefine the symbol.&lt;/p&gt;&lt;p&gt;Let's see now how a real structure is defined. A good example is &lt;code&gt;LN&lt;/code&gt; defined in &lt;code&gt;include_i/exec/nodes.i&lt;/code&gt; which represents a node of a linked list.&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   STRUCTURE    LN,0    ; List Node
    APTR    LN_SUCC ; Pointer to next (successor)
    APTR    LN_PRED ; Pointer to previous (predecessor)
    UBYTE   LN_TYPE
    BYTE    LN_PRI  ; Priority, for sorting
    APTR    LN_NAME ; ID string, null terminated
    LABEL   LN_SIZE ; Note: word aligned
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;STRUCTURE&lt;/code&gt; macro is defined in &lt;code&gt;types.i&lt;/code&gt; as&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;STRUCTURE   MACRO       ; structure name, initial offset
\1          EQU     0
SOFFSET     SET     \2
            ENDM
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;And the resulting declarations, once the macros have been expanded, are the following&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LN          EQU     0
LN_SUCC     EQU     0
LN_PRED     EQU     4
LN_TYPE     EQU     8
LN_PRI      EQU     9
LN_NAME     EQU     10
LN_SIZE     EQU     14
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;As you can see the field names are just offsets inside the structure, and there is no specific padding at the end to align the structure. In this case there is no need, as the structure size is already a multiple of a word (14 bytes).&lt;/p&gt;&lt;h3 id="how-to-align-structures"&gt;How to align structures&lt;/h3&gt;&lt;p&gt;If we need to align the bytes however we can use a little binary trick. If you ignore the least significant bit of a binary number you convert it to the nearest even number (downwards). An example in Python is&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0b1101&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0b1100&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;You can ignore the least significant bits with a simple bitwise AND&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;0b1110&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mb"&gt;0b1100&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;So, given the current offset, if we increase it by one and round down to the nearest integer we are aligning the offset to multiples of a word (2 bytes). The &lt;code&gt;ALIGNWORD&lt;/code&gt; macro in the &lt;code&gt;include_i/exec/types.i&lt;/code&gt; file implements exactly this algorithm&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ALIGNWORD   MACRO       ; Align structure offset to nearest word
SOFFSET     SET     (SOFFSET+1)&amp;amp;$fffffffe
            ENDM
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This can be seen in action in the &lt;code&gt;CardHandle&lt;/code&gt; structure defined in &lt;code&gt;include_i/resources/card.i&lt;/code&gt;. The same algorithm is implemented in other parts of the Kickstart code, for example in the &lt;code&gt;AddMemList&lt;/code&gt; function that adds memory space to the free memory pool.&lt;/p&gt;&lt;h2 id="markus-wandels-work"&gt;Markus Wandel's work&lt;a class="headerlink" href="#markus-wandels-work" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;After three years since I began this investigation I came across the work of Marcus Wandel (&lt;a href="http://wandel.ca"&gt;http://wandel.ca&lt;/a&gt;), advertised on &lt;a href="http://amigan.1emu.net/aw/TransactorUK-sep89.pdf"&gt;Amiga Transactor September 1989&lt;/a&gt;. Mr Wandel disassembled the whole Kickstart 1.2 ROM back in 1989, and you can find the result of his effort on his website at &lt;a href="http://wandel.ca/homepage/execdis/index.html"&gt;http://wandel.ca/homepage/execdis/index.html&lt;/a&gt;. I'm currently using his comments to check what I find out on my own, because I don't want to spoil the joy of discovery, and so far they confirmed I'm on the right path.&lt;/p&gt;&lt;p&gt;I think what Mr Wandel did is a great example of what computer science truly is. I'm sure his impressive contribution helped people to understand the Amiga system back in the ages, and it's definitely helping me 32 years later. Without the effort and the passion of people like Marcus Wandel, computer science would be just another corporate-owned environment.&lt;/p&gt;&lt;p&gt;Marcus's name is not as famous as that of other big players, but I consider his work extremely important. Thanks Marcus for your work and thanks to all the people who contributed to the Amiga, and to the rise of microcomputers.&lt;/p&gt;&lt;h2 id="whats-next"&gt;What's next&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The next article will describe in depth how the jump table of the Exec library is created through the &lt;code&gt;MakeFunctions&lt;/code&gt; routine. This will be shown step by step discussing the reverse engineering method followed to discover the mechanism and the relevant code.&lt;/p&gt;&lt;h2 id="resources"&gt;Resources&lt;a class="headerlink" href="#resources" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Amiga System Programmers Guide, Abacus - &lt;a href="https://archive.org/details/Amiga_System_Programmers_Guide_1988_Abacus"&gt;https://archive.org/details/Amiga_System_Programmers_Guide_1988_Abacus&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://amigadev.elowar.com"&gt;AmigaOS Developer Docs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://wandel.ca/homepage/execdis/index.html"&gt;Marcus Wandel&amp;#x27;s disassmbly of Kickstart 1.2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/blog_source/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Retro"></category><category term="assembly"></category><category term="amiga"></category><category term="retroprogramming"></category></entry><entry><title>Exploring the Amiga - Part 1</title><link href="https://www.thedigitalcatonline.com/blog/2018/05/28/exploring-the-amiga-1/" rel="alternate"></link><published>2018-05-28T14:00:00+01:00</published><updated>2021-02-26T08:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2018-05-28:/blog/2018/05/28/exploring-the-amiga-1/</id><summary type="html">&lt;p&gt;How to disassemble Amiga binaries and a discussion of the LEA instruction and relative offsets&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I decided to give some time to retroprogramming, and in particular to explore the architecture of some famous microcomputer and consoles of the 80s and 90s. Glorious 8-bit systems like the ZX Spectrum, the Commodore 64, or the Nintendo Entertainment System. 16-bits giants the likes of the Amiga, its (eventually winning) MS-DOS-based counterparts running on the early x86 architectures, the immortal Nintendo Super Famicom and SEGA Genesis.&lt;/p&gt;&lt;p&gt;I am deeply convinced that learning architectures is a perfect way to become a better programmer, even now that we have 64-bits processors, fifth generation languages, and Internet. Those old systems had many limitations and to get interesting results the programmer has to know the hardware and exploit every single bit of power it can deliver.&lt;/p&gt;&lt;p&gt;This is sometimes not true any more nowadays. On the one hand this is good, as it allows us to concentrate on business decisions and on higher layer of abstraction. On the other hand it was and it will always be useful for a programmer to face a limited system and to try to get the maximum out of it.&lt;/p&gt;&lt;p&gt;This series of posts is about the Commodore Amiga. Thousands of words have already been written on the Amiga, and I will not add anything but "milestone" to the adjectives used to describe it. This post and the following ones are not intended to be a complete and well-organised review of the architecture. Instead, they will be more a set of "lab notes" for myself that I write while I explore the platform. I put them on the blog in the hope that they will be useful for other programmers that try to crack the same problems.&lt;/p&gt;&lt;h2 id="assembly-language-and-the-amiga"&gt;Assembly language and the Amiga&lt;a class="headerlink" href="#assembly-language-and-the-amiga" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you want to write Assembly programs for the Amiga you can either work directly on a real system or use a cross-compiler. I prefer to work on my Linux system because, as much as I like retro architectures, I also like the power of a good Unix system and a modern editor.&lt;/p&gt;&lt;p&gt;Cross-compiling is a very simple concept: instead of compiling source code and creating binaries for the architecture you are running the compiler on, you create binaries for a different architecture. In this case the host architecture is Linux/amd64 and the target architecture is Amiga.&lt;/p&gt;&lt;p&gt;As this is not the only project I am following at the moment, I created a directory to host everything I need for the Amiga development: compiler, documentation, scripts.&lt;/p&gt;&lt;h3 id="install-vasm"&gt;Install vasm&lt;/h3&gt;&lt;p&gt;On Linux you can both use the GCC compiler or install vasm. The latter uses the same syntax as the standard Amiga assemblers, especially for compiler directives like &lt;code&gt;macro&lt;/code&gt; and &lt;code&gt;include&lt;/code&gt;, thus making it easier to pick up and use code published in books and in magazines during the 80s.&lt;/p&gt;&lt;p&gt;To install the latest vasm you can run the following code&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -q &amp;quot;http://sun.hasenbraten.de/vasm/release/vasm.tar.gz&amp;quot;
tar xvf vasm.tar.gz # The file is not actually gzipped
rm vasm.tar.gz
cd vasm
make CPU=m68k SYNTAX=mot
cd ..
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 id="install-a-disassembler"&gt;Install a disassembler&lt;/h3&gt;&lt;p&gt;The vbcc suite written by Volker Barthelmann contains a disassembler for the M68k architecture that you can find &lt;a href="http://sun.hasenbraten.de/~frank/projects/"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;A disassembler is a handy tool that can reveal a lot about how a program works. You can install it with the following code&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -q &amp;quot;http://sun.hasenbraten.de/~frank/projects/download/vdam68k.tar.gz&amp;quot;
tar xvzf vdam68k.tar.gz 
cd vda/M68k/
make
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;which will create the executable &lt;code&gt;vda/M68k/vda68k&lt;/code&gt; that you can use to disassemble Amiga programs or ROM dumps.&lt;/p&gt;&lt;h3 id="install-the-ndk"&gt;Install the NDK&lt;/h3&gt;&lt;p&gt;The Native Development Kit (the Amiga SDK) contains include files that can be very helpful (though not strictly necessary) when developing. Unfortunately the NDK is still copyrighted by some of the guys that are trying to resurrect the Amiga. The latter idea is nice, but I really do not understand how preventing distribution of development documentation about a platform dead more than 20 years ago might help such a project.&lt;/p&gt;&lt;p&gt;Whatever, you can get an old version of the Amiga Developer CD &lt;a href="https://archive.org/details/amiga-developer-cd-v1_1"&gt;here&lt;/a&gt;. This contains the NDK version 3.1 which is enough for what we are going to learn in this series.&lt;/p&gt;&lt;p&gt;You may want to rename the &lt;code&gt;Includes&amp;amp;Libs&lt;/code&gt; directory to &lt;code&gt;Includes_Libs&lt;/code&gt; to simplify its access by the compiler command line (&lt;code&gt;&amp;amp;&lt;/code&gt; is a special character in bash).&lt;/p&gt;&lt;h3 id="helper-script-and-test"&gt;Helper script and test&lt;/h3&gt;&lt;p&gt;I created a &lt;code&gt;asm.sh&lt;/code&gt; helper script to simplify the development process&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/where/you/put/everything&amp;quot;&lt;/span&gt;

&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/vasm/vasmm68k_mot -kick1hunks -Fhunkexe -I&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/NDK_3.1/Include_Libs/include_i -o &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;/.asm/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -nosym &lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Don't forget to run &lt;code&gt;chmod 775 asm.sh&lt;/code&gt; to make the script executable. Now run the following command&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;loop:\n btst #6,\$bfe001\n bne loop\n rts\n&amp;quot;&lt;/span&gt; &amp;gt; test.asm &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./asm.sh test.asm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;This compiles a very small program that loops until you press the right mouse button. If everything has been correctly installed you should get the following output&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vasm 1.8c (c) in 2002-2018 Volker Barthelmann
vasm M68k/CPU32/ColdFire cpu backend 2.3b (c) 2002-2017 Frank Wille
vasm motorola syntax module 3.11c (c) 2002-2018 Frank Wille
vasm hunk format output module 2.9b (c) 2002-2017 Frank Wille

CODE(acrx2):              12 bytes
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;And running the &lt;code&gt;file&lt;/code&gt; command should return the correct type&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ file test
test: AmigaOS loadseg()ble executable/binary
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 id="lea-the-pc-and-the-relative-offset"&gt;LEA, the PC and the relative offset&lt;a class="headerlink" href="#lea-the-pc-and-the-relative-offset" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In Assembly, you can manage memory cells using either their content or the address, as you can do with pointers in C or similar concepts in other high-level languages. You can also set labels that the assembler will convert into instruction addresses, but these are (almost) always relative to the beginning of the code itself, as the code may be loaded anywhere in memory.&lt;/p&gt;&lt;p&gt;This means that, generally speaking, all the addresses we use when we branch to other parts of the code should be relative to the current instruction.&lt;/p&gt;&lt;p&gt;The Motorola 68k calls this addressing mode &lt;em&gt;Program Counter Indirect with Displacement Mode&lt;/em&gt;. Its description contained in the Programmer's Reference Manual is&lt;/p&gt;&lt;div class="callout"&gt;&lt;div class="content"&gt;&lt;p&gt;In this mode, the operand is in memory. The address of the operand is the sum of the address in the program counter (PC) and the sign-extended 16-bit displacement integer in the extension word. The value in the PC is the address of the extension word.&lt;/p&gt;
&lt;p&gt;(2.2.11, page 2-13)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The usual assembler syntax for this addressing mode is &lt;code&gt;(d16,PC)&lt;/code&gt; or &lt;code&gt;d16(PC)&lt;/code&gt;, where &lt;code&gt;d16&lt;/code&gt; is a 16-bits displacement. The &lt;code&gt;lea&lt;/code&gt; instruction, for example, supports this mode, so we can find code like&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;00000364: 41fa ffa6         lea     0x30c(pc),a0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Here the instruction is stored at address &lt;code&gt;0x0364&lt;/code&gt; and it loads in the &lt;code&gt;a0&lt;/code&gt; register the &lt;em&gt;effective address&lt;/em&gt; of the instruction at &lt;code&gt;0x030c&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Pay attention: since your code starts always at address &lt;code&gt;0x0&lt;/code&gt;, you might be tempted to store the value &lt;code&gt;0x030c&lt;/code&gt; into &lt;code&gt;a0&lt;/code&gt; and go on. You want however to load the address that instruction has at runtime, which will be different from the current one. The displacement, however, will be the same, as the code doesn't change its form, and this is why this addressing mode is useful.&lt;/p&gt;&lt;h3 id="relative-offset-encoding"&gt;Relative offset encoding&lt;/h3&gt;&lt;p&gt;A question may arise, then: why does the code show the address &lt;code&gt;0x30c&lt;/code&gt;, which is the effective address, if the displacement is relative?&lt;/p&gt;&lt;p&gt;In the example, the syntax &lt;code&gt;0x30c(pc)&lt;/code&gt; doesn't mean "the line at &lt;code&gt;0x30c&lt;/code&gt; from the current line", but "the line at &lt;code&gt;0x30c&lt;/code&gt; &lt;strong&gt;considering that&lt;/strong&gt; the current line is &lt;code&gt;0x0364&lt;/code&gt;". Let's dig into the binary representation of the instruction to see how the processor receives it. The value &lt;code&gt;0x41faffa6&lt;/code&gt; in binary form is &lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;01000001111110101111111110100110
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;If we split it according to the Motorola 68k opcodes scheme (Programmer's Reference Manual, Section 8) we get&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0100 000 111 111010 1111111110100110
^    ^       ^
lea  a0      (d16,PC)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;So we know this is a &lt;code&gt;lea&lt;/code&gt; to &lt;code&gt;a0&lt;/code&gt; using Program Counter with Displacement. The address argument is &lt;code&gt;1111111110100110&lt;/code&gt;, which has to be interpreted as a "sign-extended 16-bit displacement integer" as the Reference Manual stated. The value is the two's complement representation of the decimal &lt;code&gt;-90&lt;/code&gt;, and since the PC is pointing at the address itself (&lt;code&gt;0x0366&lt;/code&gt;) the resulting address is &lt;code&gt;0x0366 - 90&lt;/code&gt;, which gives &lt;code&gt;0x030c&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The fact that the PC is pointing at the address might be overlooked. The manual says&lt;/p&gt;&lt;div class="callout"&gt;&lt;div class="content"&gt;&lt;p&gt;The value in the PC is the address of the extension word. (2.2.11, page 2-13)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;So, while the Assembly code uses the absolute value, the actual opcode contains a true displacement from the current position. The disassembler formats the value so that it is easy for us to understand the effective address (&lt;code&gt;0x30c&lt;/code&gt;), but also telling us that there is more going on behind the scenes using the &lt;code&gt;(pc)&lt;/code&gt;suffix.&lt;/p&gt;&lt;h2 id="how-to-open-a-library"&gt;How to open a library&lt;a class="headerlink" href="#how-to-open-a-library" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When you code in a high level language like C you usually refer to functions of an external library in your code and then provide the library object files on the compiler command line. The code of the library is either included in the code of your program or loaded into memory at runtime (shared libraries), but in both cases the function call is, at the machine language level, just a jump to a different address in memory.&lt;/p&gt;&lt;p&gt;If you write a program directly in Assembly language things are not different, you can always rely on the linker to properly address external libraries. In a platform like Amiga, however, it's custom to access the system libraries in a direct way, manually jumping to the right address, which is why sometimes tutorials and books contain "magic numbers".&lt;/p&gt;&lt;p&gt;When the Amiga OS loads a library in memory the Exec master library analyses its structure and creates the so-called &lt;em&gt;jump table&lt;/em&gt;. This is nothing more than an array that lists the addresses of the functions exposed by the library. This is a very simple and effective way to let the OS free to load the library anywhere in memory (relocation).&lt;/p&gt;&lt;p&gt;The Exec master library is not different, but this library is loaded as part of the bootstrap process, and the base address is always stored in memory location &lt;code&gt;0x4&lt;/code&gt;. To use one of Exec's functions, then, we just need to issue a &lt;code&gt;jsr &amp;lt;address&amp;gt;&lt;/code&gt; (Jump to SubRoutine), where &lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt; is the current position in memory of the function we want to call. Since we don't know the absolute address, being the library dynamically loaded, we use the library's jump table to retrieve the base address and get the function address as a fixed offset from the former.&lt;/p&gt;&lt;p&gt;Many Amiga programmers knew (and know) the addresses by heart, which is fine since the Amiga OS promises not to change the order of the jump table among different versions of Exec. So, for example, the address of the &lt;code&gt;OpenLibrary&lt;/code&gt; function can be found at &lt;code&gt;-552&lt;/code&gt; bytes before the library base address, while &lt;code&gt;CloseLibrary&lt;/code&gt; is at &lt;code&gt;-414&lt;/code&gt;. To call the &lt;code&gt;OpenLibrary&lt;/code&gt; function, then, you need the following code&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    move.l 4.w,a6   ; a6 = base address of Exec
    jsr -552(a6)    ; OpenLibrary()
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The first instruction moves the value contained at address &lt;code&gt;0x4&lt;/code&gt; into the &lt;code&gt;a6&lt;/code&gt; register. This way the register will contain the base address of Exec. Then it jumps to the subroutine which address is 552 bytes before that base address. So, if &lt;code&gt;a6&lt;/code&gt; contains an address like &lt;code&gt;0x20000&lt;/code&gt; the code jumps to &lt;code&gt;0x1fdd8&lt;/code&gt; (&lt;code&gt;0x20000 - 552&lt;/code&gt;). This also shows us that the jump table is actually a proper list of jump instructionss, not just addressess.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;OpenLibrary&lt;/code&gt; function, however, expects some parameters, as you can see on the documentation page &lt;code&gt;exec.library/OpenLibrary&lt;/code&gt; (&lt;a href="http://amigadev.elowar.com/read/ADCD_2.1/Includes_and_Autodocs_3._guide/node0222.html"&gt;here&lt;/a&gt;).&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;library = OpenLibrary(libName, version)
D0                    A1       D0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The pointer to the library name has to be in the register &lt;code&gt;a1&lt;/code&gt; and the minimum accepted version in &lt;code&gt;d0&lt;/code&gt;. The code becomes&lt;/p&gt;&lt;div class="code"&gt;&lt;div class="content"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    move.l 4.w,a6        ; a6 = base address of Exec
    clr.l d0             ; 0 = accept all versions
    move.l #libname,a1   ; a1 = address of the libname string
    jsr -552(a6)         ; OpenLibrary()

libname:
    dc.b &amp;quot;somename.library&amp;quot;,0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 id="whats-next"&gt;What's next&lt;a class="headerlink" href="#whats-next" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In the next article I will explore the library jump table in detail, discussing in particular the first four entries. I will also show how types and structures are defined in the Assembly include files.&lt;/p&gt;&lt;h2 id="resources"&gt;Resources&lt;a class="headerlink" href="#resources" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Motorola M68000 Family Programmer's Reference Manual - &lt;a href="https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf"&gt;https://www.nxp.com/docs/en/reference-manual/M68000PRM.pdf&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://amigadev.elowar.com"&gt;AmigaOS Developer Docs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/blog_source/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Retro"></category><category term="assembly"></category><category term="amiga"></category><category term="retroprogramming"></category></entry></feed>