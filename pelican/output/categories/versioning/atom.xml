<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Digital Cat - versioning</title><link href="https://www.thedigitalcatonline.com/" rel="alternate"></link><link href="https://www.thedigitalcatonline.com/categories/versioning/atom.xml" rel="self"></link><id>https://www.thedigitalcatonline.com/</id><updated>2021-09-23T12:00:00+01:00</updated><subtitle>Adventures of a curious cat in the land of programming</subtitle><entry><title>Versioning - An underrated discipline</title><link href="https://www.thedigitalcatonline.com/blog/2013/03/20/versioning-an-underrated-discipline/" rel="alternate"></link><published>2013-03-20T10:02:00+01:00</published><updated>2021-09-23T12:00:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2013-03-20:/blog/2013/03/20/versioning-an-underrated-discipline/</id><summary type="html">&lt;h2 id="overture"&gt;Overture&lt;a class="headerlink" href="#overture" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Whoever uses a computer has to deal every day with software version numbers, and even occasional users shall sooner or later introduce the word &lt;em&gt;version&lt;/em&gt; in their speech. Alas, this made it one of those concepts so pervading that it is now taken for granted, and so widespread that …&lt;/p&gt;</summary><content type="html">&lt;h2 id="overture"&gt;Overture&lt;a class="headerlink" href="#overture" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Whoever uses a computer has to deal every day with software version numbers, and even occasional users shall sooner or later introduce the word &lt;em&gt;version&lt;/em&gt; in their speech. Alas, this made it one of those concepts so pervading that it is now taken for granted, and so widespread that even professionals often forget or do not even know the complexity hidden behind it. This article is an attempt to shine a light on this topic.&lt;/p&gt;&lt;p&gt;This post started as a collection of some thoughts that aimed to summarise my experience in more than 20 years of software development. As usual, short sentences proved to be too short and became long sentences, then paragraphs, and the short list was already a long article. However, despite the length, my analysis does not claim to be either complete or exact. It simply represents an attempt to introduce the reader to the complexity of a matter which is always relevant in the software world.&lt;/p&gt;&lt;h2 id="a-known-concept"&gt;A known concept?&lt;a class="headerlink" href="#a-known-concept" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Isn't versioning just a simple concept that everybody knows?&lt;/p&gt;&lt;p&gt;Almost all computer users around the world can roughly deal with different versions of the most common programs. Windows 10 is more recent than Windows 8, Photoshop 2020 has been replaced by Photoshop 2021, and so on.&lt;/p&gt;&lt;p&gt;Certain software products, however, have more complicated version numbers. For example, the latest Chrome version at the time of writing is 93.0.4577.63, and the Linux kernel that I am running on my notebook is 5.4.0-81-generic. Whoever approaches software development for the first time might be surprised by such complicated numbers, and fail to grasp the reason behind them.&lt;/p&gt;&lt;p&gt;I think that as software developers we need to be aware of what is in a version number, and the reasons behind the choice of one scheme or another.&lt;/p&gt;&lt;h3 id="an-example-of-product-versioning"&gt;An example of product versioning&lt;/h3&gt;&lt;p&gt;To show that things are a bit more complicated than they appear at a first glance, let's have a look at a simple example of versioning outside the pure software world. In 1994, Sony created the Playstation and has since then released 5 versions of it, named Playstation, Playstation 2, Playstation 3, Playstation 4, and Playstation 5. A simple and effective versioning scheme.&lt;/p&gt;&lt;p&gt;In 2000, Sony released the PS One, which was a redesigned version of the original Playstation, but as you can see the name doesn't fit the initial simple list. Even different configurations of the following models fall outside the main naming scheme: the Playstation 2 Slim, the Playstation 3 Super Slim, the Playstation 4 Pro, and the Playstation 5 Digital Edition are examples of such configurations.&lt;/p&gt;&lt;p&gt;Even though such names do not follow strict rules, it's still pretty easy to identify the so-called major versions and to decide which is newer, as any configuration of the Playstation 3 (standard, Slim, and Super Slim) is more modern than any configuration of the Playstation 2. It is not so simple to know where to put the Playstation One, though, without knowing the history of the product.&lt;/p&gt;&lt;p&gt;In 2001 Microsoft entered the market with the Xbox, one year after Sony introduced the Playstation 2. About four years later, Sony was planning to release the third version of Playstation, and Microsoft answered with Xbox 360. The third version of Xbox was initially nicknamed Xbox 720, but it hit the market with the official name of Xbox One, followed 7 years later by the Xbox Series S and Series X.&lt;/p&gt;&lt;p&gt;In this case, it's not so trivial to identify which console came first. While the Playstation One was a new version of the original console, the Xbox One belongs to the third generation of that product line, and without being into the console world, it might be tough to guess whether the Xbox 360 came before or after the Series S.&lt;/p&gt;&lt;h2 id="a-formal-definition-of-versioning"&gt;A formal definition of versioning&lt;a class="headerlink" href="#a-formal-definition-of-versioning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;So far, I have leveraged an intuitive understanding of the concepts of versioning and versioning scheme, but it's time to try to give a formal definition to them.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Versioning&lt;/em&gt; means labelling the state of an object at a given moment in time according to a set of rules. This set of rules is called &lt;em&gt;versioning scheme&lt;/em&gt; or versioning system. Versioning schemes can be formal and strict, such as those used in software products, or weak, such as those used in marketing. A weak system can just use arbitrary labels, as we saw in the example of consoles, while strong versioning schemes have to clearly establish the rules that version numbers are meant to follow.&lt;/p&gt;&lt;p&gt;A versioning scheme has two main characteristics that we want to take into account, which I called expressivity and coverage. The first is the amount of information that you can obtain just by looking at a certain version number or comparing two, while the second measures how well the versioning scheme covers all the possible states in which the versioned object can be.&lt;/p&gt;&lt;p&gt;Back to the example drawn from the console world, the Playstation versioning scheme has a certain amount of expressivity, as it is at least easy to decide which console came first, while the Xbox version codes can't truly be compared. From the point of view of coverage, both schemes are pretty weak, as they don't establish a strict way to identify minor configuration changes. Please also note that neither scheme allows us to know which components changed between major versions just by looking at the version number itself.&lt;/p&gt;&lt;p&gt;As mentioned before, such shortcomings are perfectly acceptable in the context of marketing but must be avoided in a more formal engineering context such as that of software development.&lt;/p&gt;&lt;h2 id="a-simple-example"&gt;A simple example&lt;a class="headerlink" href="#a-simple-example" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let us consider an example of software versioning so that we can better visualise the problems we face. The simplest versioning scheme we can conceive is made of a single integer number, such as that used by Sony with its Playstation. The first version of the software will be labelled version &lt;code&gt;1&lt;/code&gt;, the next version will be version &lt;code&gt;2&lt;/code&gt;, then version &lt;code&gt;3&lt;/code&gt; and so on.&lt;/p&gt;&lt;p&gt;Such a scheme seems to work well, and as we saw it has been successfully used for commercial products. When it comes to software products, however, we need to be aware that both the expressivity and the coverage of this system can be problematic.&lt;/p&gt;&lt;p&gt;With such a scheme, it is impossible to grasp the type and amount of changes that occurred between two versions just by comparing the two version numbers. For example, both fixing a minor bug and a complete rewrite of the graphical interface will increase the version number by one. Thus, the impact of the changes between version X and Y are unknown until we check the release notes that will hopefully clarify the matter.&lt;/p&gt;&lt;p&gt;Things are not much better when it comes to the coverage. Let's consider the case of a piece of software that has two major versions available on the market at the same time, labelled &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; according to the scheme. If both versions are actively maintained, bugs have to be fixed and a new version has to be released. This is often the case with software: as an example take the Python programming language, whose versions 2 and 3 have been actively maintained together for 12 years while large codebases were migrated to the newest major version.&lt;/p&gt;&lt;p&gt;In such a scenario, developers might find a bug that affects both versions, thus requiring a new version to be created. The new release of version &lt;code&gt;2&lt;/code&gt; will be called &lt;code&gt;3&lt;/code&gt; according to the versioning scheme, but what would happen to version &lt;code&gt;1&lt;/code&gt;? It cannot be called version &lt;code&gt;2&lt;/code&gt; since that label has already been assigned to another state of the code.&lt;/p&gt;&lt;p&gt;Now, the fact that both the expressivity and the coverage of this versioning scheme proved low doesn't mean it cannot be used. Always remember that shortcomings are such in relation to some requirements. For example, if you never have two different versions available at the same time, the above scheme might be a good solution.&lt;/p&gt;&lt;h2 id="an-improved-example"&gt;An improved example&lt;a class="headerlink" href="#an-improved-example" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The first thing that comes to mind to improve the previous example is to add a secondary component to the version number that can be changed without affecting the primary one. A very broadly accepted and used method to add a new component to a version number is to add digits separating them from other components with a single dot (e.g. version &lt;code&gt;1.2&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;As soon as we decide to introduce a new component we need also to decide the role of each of the two parts of the version. For now, let's simplify the matter by calling them "major" and "minor" without giving a formal definition, which will come later.&lt;/p&gt;&lt;p&gt;So, the first version of the software will be &lt;code&gt;1.0&lt;/code&gt; (Major version &lt;code&gt;1&lt;/code&gt;, minor version &lt;code&gt;0&lt;/code&gt;). A minor change will increase the rightmost number, producing versions &lt;code&gt;1.1&lt;/code&gt;, &lt;code&gt;1.2&lt;/code&gt;, and so on, while a major one will increase the leftmost number and reset the rightmost, producing versions &lt;code&gt;2.0&lt;/code&gt;, &lt;code&gt;3.0&lt;/code&gt;, and so on. A typical version trail might be for example &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;1.1&lt;/code&gt;, &lt;code&gt;1.2&lt;/code&gt;, &lt;code&gt;2.0&lt;/code&gt;, &lt;code&gt;2.1&lt;/code&gt;, &lt;code&gt;3.0&lt;/code&gt;, and so on.&lt;/p&gt;&lt;p&gt;From the point of view of the expressivity, comparing version numbers in this scheme tells us more about the changes that occurred. Version &lt;code&gt;1.3&lt;/code&gt; that follows version &lt;code&gt;1.2&lt;/code&gt; will have minor changes, while a jump from &lt;code&gt;1.3&lt;/code&gt; to &lt;code&gt;2.0&lt;/code&gt; will contain code with a greater impact. Please note, however, that we still have to define what "major" and "minor" mean in this context, and that "greater impact" is thus still a vague concept. When we consider coverage we also see improvements in this scheme when compared to the previous one. If both versions &lt;code&gt;1.0&lt;/code&gt; and &lt;code&gt;2.0&lt;/code&gt; are actively maintained, a minor change that affects both will simple generate versions &lt;code&gt;1.1&lt;/code&gt; and &lt;code&gt;2.1&lt;/code&gt;.&lt;/p&gt;&lt;h2 id="about-numbering"&gt;About numbering&lt;a class="headerlink" href="#about-numbering" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I think it is important at this point to discuss numbering systems a bit more in-depth. If you are not very familiar with software versioning you might have been surprised by the version trail shown above: why is version &lt;code&gt;1.0&lt;/code&gt; the first one and not &lt;code&gt;1.1&lt;/code&gt;?&lt;/p&gt;&lt;p&gt;Generally, we start counting from 1, and if you ask someone to tell you the first ten numbers, he or she will likely answer with the sequence 1, 2, 3, ..., 10. Base-10 numerals, however, go from 0 to 9, so we might argue that zero should be considered the first number. You might be surprised to discover that this debate is all but simple and that there are many different conventions and opinions on the matter.&lt;/p&gt;&lt;p&gt;In particular, in computer programming, there are languages that index arrays from 0 (e.g. Lisp, C, Python, JavaScript), and languages that opted for 1-indexed arrays (e.g. Fortran, COBOL, MATLAB). While it might be argued that indexing from zero is exactly what we do when we consider all numbers with a given amount of digits, there is an ambiguity in the common language since we name positions in a list starting from 1, thus mixing the cardinal and ordinal system. For example, in English, the word "third" comes from three, "fourth" comes from four ("the first” comes from "the foremost" and “the second” comes from the Latin secundus), so if we used 0-indexed sequences we would end up with the third element having index 2, the fourth having index 3, and so on.&lt;/p&gt;&lt;p&gt;This ambiguity comes from the rather late introduction of the number zero in western culture, officially around 1200, and if you think this doesn't affect your everyday life please consider how you read the clock. The day starts at 00:00, not at 01:01. Indeed "the first hour" is hour number 0.&lt;/p&gt;&lt;p&gt;When it comes to versioning, it's commonly accepted that the first version of a piece of software is &lt;code&gt;1.0&lt;/code&gt;, and as you can see if that's true there is inconsistency between the way we treat the first digit and the second one. Versions starting with 0 exist but they are usually considered belonging to the early stages of development and thus being "unstable". I will come back to this point later.&lt;/p&gt;&lt;h2 id="incompatibility-and-versioning"&gt;Incompatibility and versioning&lt;a class="headerlink" href="#incompatibility-and-versioning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Previously I talked about changes that introduce an incompatibility, but I did not formally define this concept. &lt;em&gt;Incompatibility&lt;/em&gt;, in the computer world, is the complete or partial impossibility of using a version of a piece of software (or hardware) in place of another. &lt;/p&gt;&lt;p&gt;Let’s consider a simple example taken from the everyday life of a common computer user. I can write a document using Microsoft Word 2007 and save it in its native format, namely DOCX. Then I send the file to another person, who can only use Word 2003 and he or she cannot open it. Why? Simply because the changes introduced in Office 2007 to the file format are incompatible, that is they change the file format to such an extent that a previous version of the software cannot even show a part of the content.&lt;/p&gt;&lt;p&gt;As you can imagine, the fields where incompatibility problems can arise are many. Speaking in general every part of a piece of software (or hardware) that is exposed to external systems can be affected by incompatibility issues. Such parts are altogether known as &lt;em&gt;interfaces&lt;/em&gt;, and according to the field of application, you can have network interfaces, programming interfaces, hardware interfaces, etc.&lt;/p&gt;&lt;p&gt;An example borrowed from the hardware world will make this clear. If you design a new version of a webcam, replacing the internal components to provide a much better picture quality but keeping the same connector (e.g. USB-A) it used previously, every user will be able to instantly switch to the new version. If you change the connector (e.g. from USB-A to USB-C) users might have to buy an adapter, if their notebook doesn't have ports with the new interface.&lt;/p&gt;&lt;p&gt;It should be noted at this point that not every change to an interface introduces an incompatibility. A &lt;em&gt;backward compatible interface&lt;/em&gt; can act both as the new version and the old one (or ones), either automatically or manually driven. For example, the previously mentioned Office 2007 is backwards compatible with Office 2003 since it can automatically read the old file format and can manually be driven to save a file in that format.&lt;/p&gt;&lt;p&gt;Users will always take for granted that your software is backwards compatible with its previous versions. So it would be highly desirable for a versioning scheme to be able to clearly show possible incompatibilities in its interfaces when moving between versions to the next. The details of the incompatibility would still require to be clarified in the documentation, but the version numbers would act as a first warning.&lt;/p&gt;&lt;h2 id="example-semantic-versioning"&gt;Example: semantic versioning&lt;a class="headerlink" href="#example-semantic-versioning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A well-known and widespread versioning scheme is Semantic Versioning (also known as SemVer), which full documentation can be found at &lt;a href="https://semver.org/"&gt;https://semver.org/&lt;/a&gt;. The central idea of this scheme is to use three numbers separated by dots and to assign to each of them a meaning that is strictly connected with the changes to the interfaces.&lt;/p&gt;&lt;p&gt;As you can read in the official documentation, a SemVer version is expressed as &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; where a change of the &lt;code&gt;MAJOR&lt;/code&gt; number signals an incompatible change, a change of the &lt;code&gt;MINOR&lt;/code&gt; a compatible change, and a change of &lt;code&gt;PATCH&lt;/code&gt; a bugfix (again, backward compatible).&lt;/p&gt;&lt;p&gt;As you can see, it's very easy to understand what we should expect from an upgrade just by looking at the version numbers. An upgrade from version &lt;code&gt;2.3.0&lt;/code&gt; to version &lt;code&gt;2.3.1&lt;/code&gt; is supposed to just fix issues and thus can be done safely. An upgrade from version &lt;code&gt;2.3.0&lt;/code&gt; to version &lt;code&gt;2.4.0&lt;/code&gt; will introduce new features or mark some as deprecated (but still keeping them active), which means that we can upgrade safely, but we should have a good look at the documentation to know what is going on. Last, a change from version &lt;code&gt;2.3.0&lt;/code&gt; to version &lt;code&gt;3.0.0&lt;/code&gt; is supposed to be destructive, so it has to be planned carefully.&lt;/p&gt;&lt;p&gt;SemVer allows to label pre-releases and to append build metadata, and the versioning system documentation has been versioned with SemVer itself, having reached version 2.0.0 in 2013.&lt;/p&gt;&lt;p&gt;Please note, however, that the documentation states that "Software using Semantic Versioning MUST declare a public API", which makes it clear that the scheme is well suited for libraries and may be less useful or appropriate for user-facing tools like frameworks and programming languages.&lt;/p&gt;&lt;h2 id="example-calendar-versioning"&gt;Example: calendar versioning&lt;a class="headerlink" href="#example-calendar-versioning" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;While semantic versioning proposes a pretty strict approach and set of rules, Calendar versioning (CalVer) is more intended to be a set of guidelines to design your own versioning scheme. Despite the name, calendar versioning is not strictly connected with objective time but rather tries to make the release number more connected with the release calendar of the piece of software you maintain.&lt;/p&gt;&lt;p&gt;As such, CalVer versions usually incorporate a part that is time-related, and other numbers that are more similar to the ones used by SemVer in that they try to capture and communicate the extent of changes made in a version.&lt;/p&gt;&lt;p&gt;You can read CalVer documentation at &lt;a href="https://calver.org/"&gt;https://calver.org/&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="versioning-is-a-discipline"&gt;Versioning is a discipline&lt;a class="headerlink" href="#versioning-is-a-discipline" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Versioning is not a set of fixed rules, but a &lt;em&gt;methodology&lt;/em&gt;. When a development group follows a new methodology it both adopts and adapts it. Adopting means shifting the work procedures to follow those proposed by the methodology while adapting means changing the methodology to fit the environment where it is supposed to be used.&lt;/p&gt;&lt;p&gt;Versioning is a &lt;em&gt;discipline&lt;/em&gt;, a way of thinking, where rules are the product of general concepts modelled after the scope and the environment where they are used. So the versioning scheme of a product can vary over time since product or user requirements change.&lt;/p&gt;&lt;p&gt;Software is one of the environments where design is faster, always changing, and distributed among several people, so many things need to be versioned, not just the final product. The latter, indeed, could have a life cycle of several years, but in the meantime, bug fixes could be released, experimental code produced, tools and documentation enhanced. All those things can, and many times they should, be versioned.&lt;/p&gt;&lt;p&gt;Do not assume that one single versioning scheme can fit all your needs. The method for dealing with an object is imposed by the object itself, so the versioning scheme is imposed by the versioned object. Your documentation probably needs a different scheme from a software tool.&lt;/p&gt;&lt;p&gt;Thus, the following guidelines must be shaped by the specific needs of the development group, and these are forced by the product, the size of the team, the market and several other surrounding conditions of which each team manager should take account. &lt;/p&gt;&lt;p&gt;1. &lt;strong&gt;Versioning rules and procedures should take into account not only current needs but also future ones&lt;/strong&gt;, to avoid as much as possible to be forced to change them. When you design something it is advisable to consider the matter from several points of view and to explore different “what if?” scenarios.&lt;/p&gt;&lt;p&gt;2. &lt;strong&gt;Versioning rules must be clearly explained&lt;/strong&gt; and written in an easily accessible document (e.g. on an intranet in HTML format). Rules must be short, and you should provide use cases and answers to frequently asked questions.&lt;/p&gt;&lt;p&gt;3. &lt;strong&gt;Versioning rules must be quickly changed if they are no more suitable&lt;/strong&gt; to the use cases that the developers have to deal with. One of the Extreme Programming mantras, “embrace change”, must be the spirit of any rule system which aims to be useful.&lt;/p&gt;&lt;p&gt;4. &lt;strong&gt;The change of versioning rules should be fully backwards compatible if possible.&lt;/strong&gt; Every time the system evolves, it should thus become a superset of the previous rules. This way the technical shock originated by the change can be easily absorbed. Backward compatibility is not always possible to achieve, and in such cases, the two systems should possibly be marked so that a version number is unequivocally connected to one of them (using a prefix, for example). The date when the new system takes over the old one must be recorded.&lt;/p&gt;&lt;h2 id="finale"&gt;Finale&lt;a class="headerlink" href="#finale" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As you can see there is much to say about this subject, and this article only scratches the surface of the matter. However, I hope it helped you to have a big picture of the different aspects that hide behind those simple labels or numbers called versions.&lt;/p&gt;&lt;p&gt;If you are managing a project and are looking for a tool to manage the versions you might want to have a look at &lt;a href="https://github.com/lgiordani/punch"&gt;punch&lt;/a&gt;, a highly configurable tool written in Python that can automatically increase the version number in any file according to the versioning rules you defined.&lt;/p&gt;&lt;h2 id="resources"&gt;Resources&lt;a class="headerlink" href="#resources" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;The Wikipedia article on &lt;a href="https://en.wikipedia.org/wiki/Software_versioning"&gt;Software versioning&lt;/a&gt;&lt;/li&gt;&lt;li&gt;The official page of &lt;a href="https://semver.org/"&gt;Semantic Versionining&lt;/a&gt;&lt;/li&gt;&lt;li&gt;The official page of &lt;a href="https://calver.org/"&gt;Calendar Versionining&lt;/a&gt;&lt;/li&gt;&lt;li&gt;The Wikipedia article on &lt;a href="https://en.wikipedia.org/wiki/Zero-based_numbering"&gt;Zero-based_numbering&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="feedback"&gt;Feedback&lt;a class="headerlink" href="#feedback" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Feel free to reach me on &lt;a href="https://twitter.com/thedigicat"&gt;Twitter&lt;/a&gt; if you have questions. The &lt;a href="https://github.com/TheDigitalCatOnline/thedigitalcatonline.github.com/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;</content><category term="Programming"></category><category term="versioning"></category></entry><entry><title>Punch 2.0.0 is out</title><link href="https://www.thedigitalcatonline.com/blog/2019/11/21/punch-2-0-0/" rel="alternate"></link><published>2019-11-21T16:00:00+01:00</published><updated>2019-11-21T16:00:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2019-11-21:/blog/2019/11/21/punch-2-0-0/</id><summary type="html"></summary><content type="html">&lt;p&gt;Punch 2.0.0 is out!&lt;/p&gt;
&lt;p&gt;This is the latest release of the project that I started to replace bumpversion. Update your version while having a drink!&lt;/p&gt;
&lt;p&gt;Punch is a configurable version updater, and you can use to automate the management of your project’s version number.&lt;/p&gt;
&lt;p&gt;Changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DEPRECATION&lt;/strong&gt; Punch doesn't support GLOBAL variables in the FILES variable anymore. The values given to fields in the FILES section are now simple strings and are not processed through Jinja2 anymore.&lt;/li&gt;
&lt;li&gt;Initial drop of Python 2.x: the CI process doesn't test Python2.x anymore.&lt;/li&gt;
&lt;li&gt;Complete review of documentation: the docs have been split in multiple files to make it easier to find information and to understand the program.&lt;/li&gt;
&lt;li&gt;Initial implementation of automatic documentation from tests. Integration tests can now be parsed to extract examples for the documentation. See &lt;a href="https://punch.readthedocs.io/en/latest/test_examples/"&gt;Examples from the tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Named serializers: serializers now can be given a name through a dictionary syntax. With this change it becomes possible to select the serializer to use for the VCS. See &lt;a href="https://punch.readthedocs.io/en/latest/configuration/#globals"&gt;Configuration &amp;gt; GLOBALS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Complex serializers: standard serializers use the same pattern both for the search and for the replace actions. With complex serializers you can define two different patterns, one for each action. See &lt;a href="https://punch.readthedocs.io/en/latest/advanced/#complex-serializers"&gt;Advanced configuration &amp;gt; Complex serializers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The configuration of each file managed by Punch can override the global serializers or add new ones. See &lt;a href="https://punch.readthedocs.io/en/latest/configuration/#files"&gt;Configuration &amp;gt; FILES&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Release notes: Punch can be configured to check if a pattern based on the new version is present in the managed files. This makes it simple to check if HISTORY files have been updated without requiring to interrupt the execution of the program and later restore it. See &lt;a href="https://punch.readthedocs.io/en/latest/advanced/#release-notes"&gt;Advanced configuration &amp;gt; Release notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read the full documentation &lt;a href="https://punch.readthedocs.io/en/latest/"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="Projects"></category><category term="Git"></category><category term="Python"></category><category term="Python3"></category><category term="versioning"></category></entry><entry><title>Punch - Update your version while having a drink</title><link href="https://www.thedigitalcatonline.com/blog/2016/05/31/punch-update-your-version-while-having-a-drink/" rel="alternate"></link><published>2016-05-31T16:00:00+01:00</published><updated>2016-05-31T16:00:00+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:www.thedigitalcatonline.com,2016-05-31:/blog/2016/05/31/punch-update-your-version-while-having-a-drink/</id><summary type="html"></summary><content type="html">&lt;p&gt;So you completed your wonderful new project, all your test are successful (you &lt;a href="/categories/tdd/"&gt;test&lt;/a&gt; code, don't you?) and you just want to ship the new version and call it a day. Well, you just have to go and change the version number in your install script and save. Oh, right, you also have to open a feature branch, so that you may record the version update in your Git history. Well, easily done. Damn! You forgot to change the version number in the README.md file...&lt;/p&gt;
&lt;p&gt;Managing the version number of a project is not easy. Not only you need to think about the versioning scheme and what part of the version to increase (see &lt;a href="https://www.thedigitalcatonline.com/blog/2013/03/20/versioning-an-underrated-discipline/"&gt;this post&lt;/a&gt; for some tips on this matter), but you also need to remember in which files you put the actual version number, and, depending on your workflow, to correctly manage the version control system commits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Punch&lt;/strong&gt; is a small tool that aims to simplify the latter parts, that is the management of the version number update process. Punch is a young project but the underlying structure should be flexible enough to allow the implementation of advanced usage cases that may arise in the future.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Punch logo" src="/images/punch/icon_400x400.png"&gt;&lt;/p&gt;
&lt;h4 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Written in Python, but manages every kind of text file&lt;/li&gt;
&lt;li&gt;May implement different versioning schemas&lt;/li&gt;
&lt;li&gt;Currently supports integer version parts and multiple value integer parts&lt;/li&gt;
&lt;li&gt;Version parts may be explicitly set to given values&lt;/li&gt;
&lt;li&gt;The same version number can be represented in different ways using Jinja2 templates&lt;/li&gt;
&lt;li&gt;Each managed file may override the global behaviour with custom settings&lt;/li&gt;
&lt;li&gt;Can automatically commit using Git or git-flow&lt;/li&gt;
&lt;li&gt;May optionally create annotated commits&lt;/li&gt;
&lt;li&gt;Can simulate the version upgrade and show what is going to happen&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="installation"&gt;Installation&lt;a class="headerlink" href="#installation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You may install Punch in your virtual environment (or in your system) directly from PyPI&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install punch.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and you will have the &lt;code&gt;punch&lt;/code&gt; executable available.&lt;/p&gt;
&lt;h4 id="useful-links"&gt;Useful links&lt;a class="headerlink" href="#useful-links" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Punch official documentation: &lt;a href="https://punch.readthedocs.io/en/latest/"&gt;https://punch.readthedocs.io/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official repository &lt;a href="https://github.com/lgiordani/punch"&gt;https://github.com/lgiordani/punch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Issues and pull requests &lt;a href="https://github.com/lgiordani/punch/issues"&gt;https://github.com/lgiordani/punch/issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free to submit your issues or pull requests, contributions are welcome.&lt;/p&gt;</content><category term="Projects"></category><category term="Git"></category><category term="Python"></category><category term="Python2"></category><category term="Python3"></category><category term="versioning"></category></entry></feed>